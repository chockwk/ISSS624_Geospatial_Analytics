---
title: "Calibrate Spatial Interaction Models"
author: "Wan Kee"
date: "21 November 2023"
date modified: "12 December 2023"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: source
---


# 1. Overview

## Spatial Interaction Models

**Spatial interaction model** is a broad mathematical model that **predicts** the movement of people between origins and destinations by examining the distance between them. These models are used to understand how the **quantity of interaction** between two locations can be influenced by the characteristics of the locations themselves (such as population size or economic activity), the distance between them, and other intervening factors. It is based on (1) their **spatial separation**; (2) their **complementarity**; and (3) other **intervening opportunities** or spatial structural elements serve to augment or diminish the expected flow.

(1) **Complementarity** is an indicator of the suitability of the particular pair of places for the movement 

(2) Interactions may be diverted to **intervening opportunities** with considerations on the relative location of other interacting agents

(3) **Transferability** is measured by cost or time involved in the interaction, and is often represented by a distance-decay function that shows diminishing interaction as distance increases.

Notes diagonals of distance matrix will be zero.

# 2. Load packages

`sf` and `sp` performs geospatial data import, integration, processing and transformation.
`DT` enables R data objects (matrices or data frames) to be displayed as tables on HTML pages.
`tidyverse` performs data import, integration, wrangling and visualization. 
`tmap` creates thematic maps. 
`stplanr`analyses OD matrix.
`reshape2` restructures and aggregates data.
`performance`contains utilities for computing measures to assess model quality.
`ggpubr` arrange and annotate multiple plots.


```{r}
pacman::p_load(tmap, sf, sp, DT, stplanr, tidyverse, reshape2, performance, ggpubr)
```


# 3. Import data

:::panel-tabset

## Passenger Volume

`odbus` is an **aspatial** dataset containing the number of trips by weekdays and weekends from origin to destination bus stops. It reflects the passenger trip traffic and the most recent dataset from **September 2023** will be used. 

The output indicates **5,714,196 records** and 7 fields. The bus stop codes are converted into factor for data handling.

Source: LTA DataMall ([Postman URL](http://datamall2.mytransport.sg/ltaodataservice/PV/ODBus))


```{r}
od_data = read_rds("data/rds/od_data.rds")
```


## Subzone

`mpsz` is a **geospatial** dataset from the Master Plan 2019, a forward looking guiding plan for Singapore's development in the medium term over the next 10 to 15 years published in **2019**. Note this `mpsz` differs from that in previous chapter, [Data Wrangling](https://cosmic-kitten.netlify.app/hands_on_ex/hands_on_ex01/hands_on_ex01).

The output indicates that the geospatial objects are **multipolygon** features. There are **332 features** and 6 fields. It is in **WGS84** projected coordinates system with **XY** dimension.


```{r}
mpsz = read_rds("data/rds/mpsz.rds")
```

```{r}
print(class(mpsz))
```


## Population

`pop` is an **aspatial** dataset of Singapore residents grouped by planning area or subzone, age group, sex and floor area of residence. The data period is from **June 2011 onwards**. From June 2011 to 2019, the planning areas refer to areas demarcated in the Master Plan 2014, and from June 2020 onwards will be Master Plan 2019.

The output indicates **738,492 records** and 7 fields to illustrate the population distribution by planning area (PA), subzone (SZ), age group (AG), residence floor area (FA), resident count (Pop).

Source: Department of Statistics ([Link](https://www.singstat.gov.sg/-/media/files/find_data/population/statistical_tables/respopagesexfa2011to2020.ashx))


```{r}
pop <- read_csv("data/aspatial/pop.csv")
glimpse(pop)
```

:::

# 4. Calibrate Spatial Interaction Model

In spatial interaction, a distance matrix is a table that shows the distance between pairs of locations.
two ways to compute the required distance matrix:
1. sf 
2. sp

We will calibrate SIM to determine factors affecting the public bus passenger flows during the morning peak in Singapore.

## Step 1: Convert from sf data table to spatial polygons data frame

`as()` convert `mpsz` from sf tibble data frame to **spatial polygons** data frame of sp object using `sp`.


```{r}
mpsz_sp <- as(mpsz, "Spatial")
print(class(mpsz_sp))
```

```{r}
head(mpsz_sp, n=5)
```


## Step 2: Compute the distance matrix

`spDists()` of sp package will be used to compute the **Euclidean distance** between the **centroids** of the planning subzones. The output is a matrix object class where the column and row headers are not labeled with the planning subzone codes and the diagonals are zero. There are 332 features, hence 332 points, we will limit to 5 columns and 5 rows.


```{r}
dist <- spDists(mpsz_sp, longlat = FALSE)
head(dist, n = c(5, 5))
```

mpsz_sp_selected <- mpsz_sp %>% select(mpsz\@data\$SUBZONE)

sp: no need

## Step 3: Label the column and row headers of the distance matrix

We will obtain the planning subzone codes from `SUBZONE_C` and create a list of planning subzone codes.


```{r}
sz_names <- mpsz$SUBZONE_C
glimpse(sz_names)
```


`paste0` concatenates vectors after converting to characters and attach the planning subzone codes to the row and column headers of the distance matrix.


```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
glimpse(dist)
```


## Step 4: Pivot the distance value

`melt()` from `reshape2` convert object into molten dataframe. We will pivot the distance matrix into a long table by using the row and column subzone codes 

NEVER SORT THE DATA; SEQUENCE IS IMPT


```{r}
distPair <- melt(dist) %>% 
  rename(dist = value)
head(distPair, 5)
```


## Step 5: Revise intra-zonal distances with a constant value

Travelling to and fro the same bus stop do not generate any distance travelled and do not reflect real world scenarios. To estimate a pseudo value for intra-zonal distance, we will understand the minimumn, maximum, mean of the distance by using `summary()`. Filtering 0, the minimum distance between two different bus stops, in any case inter-zonal, is 173.8m. Therefore, the maximum intra-zonal distance is 86.9m.


```{r}
distPair %>% 
  filter(dist > 0) %>% 
  summary()

#min(distPair$dist)
#mean(distPair$dist)
#max(distPair$dist)
```

Given the minimum value of `dist`, we will append a constant value of 50m to replace the intra-zonal distance of 0 and rename the columns to origin and destination.

::: {.callout-tip}
## Tip
ifelse(test, yes, no)

Arguments
test - an object which can be coerced to logical mode
yes - return values for true elements of test
no - return values for false elements of test
:::


```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, 
                        distPair$dist)

distPair <- distPair %>% 
  rename(orig = Var1,
         dest = Var2)
summary(distPair)
```

Save to RDS.


```{r}
write_rds(distPair, "data/rds/distPair.rds")
```


## Step 6: Prepare data flow

Compute the total number of passenger trip between and within planning subzones using `group_by()` and `summarise()`. The output shows that there are intra-zonal trips where `ORIGIN_SZ` = `DESTIN_SZ`.


```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

```{r}
flow_data <- od_data %>% 
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarise(TRIPS = sum(MORNING_PEAK))
head(flow_data, n = 5)
```


## Step 7: Separate intra-zonal flow from passenger volume df

We will calculate the number of intra-zonal flow where `ORIGIN_SZ` = `DESTIN_SZ`.


```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, 
  flow_data$TRIPS)

flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 
  1)

head(flow_data, n = 5)
```


Step 6: Combine the passenger volume data with distance value

We will convert data value type of `ORIGIN_SZ` and `DESTIN_SZ` fields of `flow_data` data frame into factor data type.
`left_join()` of dplyr appends the distance between subzones from `distPair` data frame to `flow_data` data frame.


```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)

flow_data1 <- flow_data %>% 
  left_join(distPair,
            by = c("ORIGIN_SZ" = "orig",
                   "DESTIN_SZ" = "dest"))
glimpse(flow_data1)
```


## Step 8: Preparing Origin and Destination Attributes

Based on `PA` and `SZ` of `pop`, we will append the planning subzone codes `SUBZONE_C` from `mpsz`. The output shows that `pop` has a new column `SZ` with subzone codes.


```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
glimpse(pop)
```

Join population attribute from `pop` to origin subzone in passenger volume `flow_data`.


```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))

glimpse(flow_data1)
```

Join population attribute from `pop` to destination subzone in passenger volume `flow_data`.


```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))

glimpse(flow_data1)
```

Save to RDS


```{r}
write_rds(flow_data1, "data/rds/flow_data1.rds")
```


`flow_data1` is similar to `SIM_data`.


```{r}
SIM_data <- read_rds("data/rds/SIM_data.rds")
glimpse(SIM_data)
```


# 5. Plot data

:::panel-tabset

## Trips

Plot the distribution of the dependent variable `TRIPS` using histogram.


```{r}
ggplot(data = SIM_data, aes(x = TRIPS)) +
  geom_histogram(fill = "pink", color = "black",
                 binwidth = 2500) +
  theme(
    panel.background = element_blank()
  )
```


## Trips and Distance

Visualize the relation between the dependent variable `TRIPS` and one of the key independent variable `dist`.


```{r}
ggplot(data = SIM_data,
       aes(x = dist,
           y = TRIPS)) +
  geom_point(size = 1, colour = "lightblue") +
  geom_smooth(method = lm) +
  theme(
    panel.background = element_blank()
  )
```


## log(trips) and log(dist)

Plot the scatter plot by using the log transformed variables. 
Their relationship resembles a negative linear relationship.


```{r}
ggplot(data = SIM_data,
       aes(x = log(dist),
           y = log(TRIPS))) +
  geom_point(size = 1, colour = "lightblue") +
  labs(title = "Trips by Distance") +
  geom_smooth(method = lm) + 
  theme(
    panel.background = element_blank()
  )
```

:::

# 6. Prepare data

## Imputation

Check for variables with zero values using `summary()` of Base R to compute the summary statistics of all variables in SIM_data data frame.


```{r}
summary(SIM_data)
```


Replace zero values with 0.99.


```{r}
SIM_data$DESTIN_AGE7_12 <- ifelse(
  SIM_data$DESTIN_AGE7_12 == 0,
  0.99, SIM_data$DESTIN_AGE7_12)
SIM_data$DESTIN_AGE13_24 <- ifelse(
  SIM_data$DESTIN_AGE13_24 == 0,
  0.99, SIM_data$DESTIN_AGE13_24)
SIM_data$DESTIN_AGE25_64 <- ifelse(
  SIM_data$DESTIN_AGE25_64 == 0,
  0.99, SIM_data$DESTIN_AGE25_64)
SIM_data$ORIGIN_AGE7_12 <- ifelse(
  SIM_data$ORIGIN_AGE7_12 == 0,
  0.99, SIM_data$ORIGIN_AGE7_12)
SIM_data$ORIGIN_AGE13_24 <- ifelse(
  SIM_data$ORIGIN_AGE13_24 == 0,
  0.99, SIM_data$ORIGIN_AGE13_24)
SIM_data$ORIGIN_AGE25_64 <- ifelse(
  SIM_data$ORIGIN_AGE25_64 == 0,
  0.99, SIM_data$ORIGIN_AGE25_64)

summary(SIM_data)
```

# 7. Calibrate Spatial Interaction Model

## Gravity Models

**Gravity Models** are a specific type of **spatial interaction model**. They are named for their analogy to **Newton's law of gravity**; just as the gravitational force between two objects is proportional to their masses and inversely proportional to the square of the distance between them, the gravity model posits that the **interaction between two locations** (such as trade or travel) is **directly proportional** to their **economic mass** (usually population, GDP, etc.) and inversely proportional to some function of the distance between them. 

**Generalized linear model** is a generalization of linear regression that allows for response variables that have **error distribution models** instead of a normal distribution like Gaussian distribution. `glm()` is used to fit generalized linear models.

**Poisson regression** is useful when predicting an outcome variable representing counts from a set of continuous predictor variables.

fit <- glm(count ~ x1+x2+x3, data=mydata, family=poisson()) where x1, x2, x3 are continuous predictors.

:::panel-tabset
### Unconstrained SIM

The glm model predicts trips based on the log transformed age demographics (population aged 25 to 64) and the distance between the origin and destination.


```{r}
uncSIM <- glm(formula = TRIPS ~ log(ORIGIN_AGE25_64) + log(DESTIN_AGE25_64) + log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(uncSIM)
```

All three predictors are significant with p < 0.05. The `log(ORIGIN_AGE25_64)` coefficient of 0.2100150 suggests that the log(trips) increases by approximately 0.21 with every unit of `log(ORIGIN_AGE25_64)`. The `log(DESTIN_AGE25_64)` coefficient of 0.0128911 indicates an inverse relationship, which aligns with the gravity model theory that the interaction decreases with increasing distance.


Compute the R-squared of the unconstrained SIM

Measure how much variation of the trips can be accounted by the model.


```{r}
CalcRSquared <- function(observed,estimated){
  r <- cor(observed,estimated)
  R2 <- r^2
  R2
}
```

```{r}
CalcRSquared(uncSIM$data$TRIPS, uncSIM$fitted.values)
```

The r^2 of `uncSIM` is 0.1694734.

`r2_mcfadden` calculates McFadden's pseudo R2.


```{r}
r2_mcfadden(uncSIM)
```


::: {.callout-tip}
#### Tip with Title
`r^2` is a measure of the goodness of fit of a model. In regression, the R2 coefficient of determination is a statistical measure of how well the regression predictions approximate the real data points. An R2 of 1 indicates that the regression predictions perfectly fit the data.

`r2_mcfadden` calculates McFadden's pseudo R2 where a value from 0.2 to 0.4 indicates very good model fit.
:::

### Origin (Production) Constrained SIM

The glm model predicts trips based on the ORIGIN_SZ, log transformed age demographics (population aged 25 to 64) of destination and the distance between the origin and destination.


```{r}
orcSIM <- glm(formula = TRIPS ~ ORIGIN_SZ + log(DESTIN_AGE25_64) + log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(orcSIM)
```

```{r}
CalcRSquared(orcSIM$data$TRIPS, orcSIM$fitted.values)
```

```{r}
r2_mcfadden(orcSIM)
```


### Destination (Attraction) Constrained SIM

The glm model predicts trips based on the ORIGIN_SZ, log transformed age demographics (population aged 25 to 64) of origin and the distance between the origin and destination.


```{r}
decSIM <- glm(formula = TRIPS ~ DESTIN_SZ + log(ORIGIN_AGE25_64) + log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)

summary(decSIM)
```

```{r}
CalcRSquared(decSIM$data$TRIPS, decSIM$fitted.values)
```

```{r}
r2_mcfadden(decSIM)
```


### Doubly Constrained SIM

The glm model predicts trips based on the ORIGIN_SZ, DESTIN_SZ and the distance between the origin and destination.


```{r}
dbcSIM <- glm(formula = TRIPS ~ ORIGIN_SZ + DESTIN_SZ + log(dist),
              family = poisson(link = "log"),
              data = SIM_data,
              na.action = na.exclude)
summary(dbcSIM)
```

```{r}
CalcRSquared(dbcSIM$data$TRIPS, dbcSIM$fitted.values)
```

```{r}
r2_mcfadden(dbcSIM)
```


:::

# 8. Model Comparison

## r2 and r2_mcfadden

Based on r2 and r2_mcfadden, the **doubly constrained SIM is the best model** among all the four SIMs because it has the **highest r2 and r2 mcfadden** value of 0.6883675 and 0.774.

## RMSE

Another useful model performance measure for continuous dependent variable is **Root Mean Squared Error**. 


```{r}
model_list <- list(unconstrained=uncSIM,
                   originConstrained=orcSIM,
                   destinationConstrained=decSIM,
                   doublyConstrained=dbcSIM)
```


Compute the RMSE of all the models in `model_list` using `compare_performance()`.


```{r}
compare_performance(model_list,
                    metrics = "RMSE")
```

The output reveals that **doubly constrained SIM is the best model** among all the four SIMs because it has the **smallest RMSE** value of 1487.111.

# 9. Visualise the observed values and the fitted values

Extract the fitted values from each model and join the values to SIM_data data frame.

::: panel-tabset

## Unconstrained SIM


```{r}
df <- as.data.frame(uncSIM$fitted.values) %>%
  round(digits = 0)

SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(uncTRIPS = "uncSIM$fitted.values")
```


## Origin (Production) Constrained SIM


```{r}
df <- as.data.frame(orcSIM$fitted.values) %>%
  round(digits = 0)

SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(orcTRIPS = "orcSIM$fitted.values")
```


## Destination (Attraction) Constrained SIM


```{r}
df <- as.data.frame(decSIM$fitted.values) %>%
  round(digits = 0)

SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(decTRIPS = "decSIM$fitted.values")
```


## Doubly Constrained SIM


```{r}
df <- as.data.frame(dbcSIM$fitted.values) %>%
  round(digits = 0)

SIM_data <- SIM_data %>%
  cbind(df) %>%
  rename(dbcTRIPS = "dbcSIM$fitted.values")
```


:::

Plot the four SIM models.


```{r}
unc_p <- ggplot(data = SIM_data,
                aes(x = uncTRIPS,
                    y = TRIPS)) +
  geom_point(size = 1, colour = "lightblue") +
  geom_smooth(method = lm)+
  theme(
    panel.background = element_blank()
  )

orc_p <- ggplot(data = SIM_data,
                aes(x = orcTRIPS,
                    y = TRIPS)) +
  geom_point(size = 1, colour = "lightblue") +
  geom_smooth(method = lm)+
  theme(
    panel.background = element_blank()
  )

dec_p <- ggplot(data = SIM_data,
                aes(x = decTRIPS,
                    y = TRIPS)) +
  geom_point(size = 1, colour = "lightblue") +
  geom_smooth(method = lm)+
  theme(
    panel.background = element_blank()
  )

dbc_p <- ggplot(data = SIM_data,
                aes(x = dbcTRIPS,
                    y = TRIPS)) +
  geom_point(size = 1, colour = "lightblue") +
  geom_smooth(method = lm)+
  theme(
    panel.background = element_blank()
  )

ggarrange(unc_p, orc_p, dec_p, dbc_p,
          ncol = 2,
          nrow = 2)
```

