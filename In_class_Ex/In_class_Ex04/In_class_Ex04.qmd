---
title: "Geospatially Weighted Poisson Regression"
author: "Wan Kee"
date: "9 December 2023"
date modified: "9 December 2023"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: source
---

# 1. Overview

Learning Objectives
1.  Perform geocoding using data downloaded from data.gov.sg
2.  Calibrate Geospatially Weighted Poisson Regression

# 2. Load packages

```{r}
pacman::p_load(tidyverse, sf, httr, tmap)
```

# 3. Import data

## School

```{r}
url <- "https://www.onemap.gov.sg/api/common/elastic/search"
csv <- read_csv("data/aspatial/Generalinformationofschools.csv")
glimpse(csv)
```

## mpsz

```{r}
mpsz = st_read(dsn="data/geospatial", layer="MPSZ-2019")
```

## Business

```{r}
business = st_read(dsn="data/geospatial", layer="Business")
```

# 4. Prepare date

Step 1: Pick postal code from csv into a list and read into api for efficiency.
```{r}
postcodes <- csv$postal_code

found <- data.frame()
not_found <- data.frame()
```

Step 2: Obtain results from OneMap API, namely BLK_NO, ROAD_NAME, BUILDING, ADDRESS, POSTAL, X, Y, LATITUDE, LONGITUDE.

```{r}
for (postcode in postcodes){
  query <- list("searchVal" = postcode,
                "returnGeom" = "Y",
                "getAddrDetails" = "Y",
                "pageNum" = "1")
  res <- GET(url , query = query)
  
  if((content(res)$found) != 0){
    found <- rbind(found, data.frame(content(res))[4:13])
  }else{
    not_found = data.frame(postcode)
  }
}
```

```{r}
glimpse(found)
```

Step 3: Merge school information with geospatial data from OneMap API.

```{r}
merged = merge(csv, found, by.x = "postal_code", by.y = "results.POSTAL", all = TRUE)
write_csv(merged, file = "data/aspatial/schools.csv")
write_csv(not_found, file = "data/aspatial/not_found.csv")
```

Step 4: Manually add Zhenghua Secondary School longitude and latitude into school.csv
Google search output 1.3887°N 103.7652°E

Step 5: Import schools and rename columns

```{r}
schools <- read_csv("data/aspatial/schools.csv") %>% 
  rename(latitude = results.LATITUDE,
         longitude = results.LONGITUDE) %>% 
  select(postal_code, school_name, latitude, longitude)
glimpse(schools)
```
Step 6: Convert aspatial data to sf tibble data frame
Convert WGS84 (crs=4326) to SVY21 (crs=3414).

The output indicates **point** spatial object in **XY** dimension. There are 350 records. The projected CRS is **SVY21**.

```{r}
#schools_sf <- st_as_sf(schools,
#                       coords = c("longitude", "latitude"),
#                       crs = 4326)%>% 
#  st_transform(crs = 3414)
#head(schools_sf, n=5)
```

Step 7: Plot a point simple feature layer

```{r}
#tmap_mode("view")
#tm_shape(schools_sf)+
#  tm_dots()+
#tm_view(set.zoom.limits = c(11,14))
#tmap_mode("plot") # release resources
```

Count the number of schools within each planning subzone.

```{r}
#mpsz$"SCHOOL_COUNT" <- lengths(
#  st_intersects(
#    mpsz, schools_sf
#  )
#)
```

```{r}
#summary(mpsz$SCHOOL_COUNT)
```

```{r}
# plot polygon then dot as the layers overlap
#tmap_options(check.and.fix = TRUE)

#tm_shape(mpsz)+
#  tm_polygons()+
#tm_shape(business_sf)+
#  tm_dots()
```

Check for variables with zero values

log0 is infinity, recode 0 to 0 to 1, cannot be 0 or 1 as log1 has a value

# 4. Model Calibration


