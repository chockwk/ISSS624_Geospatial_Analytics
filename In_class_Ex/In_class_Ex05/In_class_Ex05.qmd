---
title: "In_class_Ex05"
author: "Wan Kee"
date: "16 December 2023"
date modified: "13 December 2023"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: source
---

# 1 Overview

Learning Objectives:

-   Extract explanatory variables from secondary source
-   Assemble and derive explanatory variables from publicly available geospatial data
-   Integrate these explanatory variable into a tidy variables tibble data.frame.
-   Calibrate Spatial Econometric Interaction Models by using `spflow`

# 2 Load packages

`spflow` is an estimation of spatial econometric models of origin-destination flows.

We will install the development version of `spflow` from github. Go to `Packages` and check the version number is 0.1.0.9010.

```{r}
devtools::install_github("LukeCe/spflow")
```

`sf` handles spatial data. `tidyverse` handles attribute data. `knitr` creates html tables.

```{r}
pacman:::p_load(spflow, sf, sp, spdep, tmap, tidyverse, Matrix, knitr)
```

Note: `MASS` is replaced by `Matrix` to speed up computations.

# 3 Prepare data

Three datasets are required to calibrate Spatial Econometric Interaction Models:

1.  Spatial weights
2.  Tibble data.frame of origins, destination, flows and distance between orign and destination
3.  Tibble data.frame of explanatory variables (Compared to SIM, SEIM does not require OD specification.)

# 3 Import data

## odbus6_9

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
glimpse(odbus6_9)
```

## mpsz_nb (weight)

```{r}
mpsz_nb <- read_rds("data/rds/mpsz_nb.rds")
head(mpsz_nb, n=5)
```

## mpsz_flow (OD matrix)

```{r}
mpsz_flow <- read_rds("data/rds/mpsz_flow.rds")
glimpse(mpsz_flow)
```

## mpsz_var (explanatory variables)

```{r}
mpsz_var <- read_rds("data/rds/mpsz_var.rds")
glimpse(mpsz_var)
```

# 4 Create spflow network class object

`spflow_network-class` is an S4 class that contains all information on a spatial network which is composed by a set of nodes that are linked by some neighborhood relation. It can be created by using spflow_network() of spflow package.

For our model, we choose the contiguity based neighborhood structure.

```{r}
mpsz_net <- spflow_network(
  id_net = "sg",
  node_neighborhood = nb2mat(mpsz_nb$by_contiguity),
  node_data = mpsz_var,
  node_key_column = "SZ_CODE"
)

mpsz_net
```

```{r}
mpsz_net_pairs <- spflow_network_pair(
  id_orig_net = "sg",
  id_dest_net = "sg",
  pair_data = mpsz_flow,
  orig_key_column = "ORIGIN_SZ",
  dest_key_column = "DESTIN_SZ",
)

mpsz_net_pairs
```

```{r}
mpsz_multi_net <- spflow_network_multi(mpsz_net, mpsz_net_pairs)

mpsz_multi_net
```

# 5 Correlation Analysis

**Multicollinearity** refers to a situation in which more than two explanatory variables in a multiple regression model are highly linearly related. In this situation, the coefficient estimates of the multiple regression may change erratically in response to small changes in the data or the procedure used to fit the model.

```{r}
cor_formula <- log(1 + TRIPS) ~ 
    BUSSTOP_COUNT +
    AGE7_12 +
    AGE13_24 +
    AGE25_64 +
    SCHOOL_COUNT +
    BUSINESS_COUNT +
    RETAILS_COUNT +
    FINSERV_COUNT +
    P_(log(DISTANCE + 1))

cor_mat <- pair_cor(
  mpsz_multi_net, 
  spflow_formula = cor_formula, 
  add_lags_x = FALSE)

colnames(cor_mat) <- paste0(
  substr(
    colnames(cor_mat),1,3),"...")

cor_image(cor_mat)
```

# 5 Base Model

```{r}
base_model <- spflow(spflow_formula = log(1 + TRIPS) ~
                       O_(BUSSTOP_COUNT + AGE25_64) +
                       D_(SCHOOL_COUNT + BUSINESS_COUNT + RETAILS_COUNT + FINSERV_COUNT) +
                       P_(log(DISTANCE + 1)),
                     spflow_networks = mpsz_multi_net)

base_model
```

Note: log(DISTANCE + 1) adds a small value to distance, similar to +50 in previous exercises.

Spatial interaction model estimated by: MLE (default) Spatial correlation structure: SDM (model_9, the unrestricted model with 9 matrices) Dependent variable: log(1 + TRIPS) R2_corr: 0.6942946 The model accounts for more than 69% of variation. Observations: 97969\
Model coherence: Validated

rho_d is destination constraint rho_o is origin constraint rho_w is OD constraint high t-stat and low p-value

D_SCHOOL_COUNT is significant within its D_SCHOOL_COUNT.lag1 is not significant; the neighbour school does not affect the attractiveness of its neighbours.

D_RETAILS_COUNT and D_RETAILS_COUNT.lag1 is not significant for morning peak.

D_FINSERV_COUNT.lag1 is significant; financial services improves the attractiveness of its neighbours, eg. Shenton way financial region covers three subzones.

P_log(DISTANCE + 1) does not have lag.

spflow model shows the influence of each variable on OD flow.

# 6 Residual Diagnostics: Moran

Moran Scatterplot to visualize spatial autocorrelation. Diagonals close to zero indicates little autocorrelation.

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))

spflow_moran_plots(base_model)
```

# 7 Residual Diagnostics: Colinearity

```{r}
corr_residual <- pair_cor(base_model)
colnames(corr_residual) <- substr(colnames(corr_residual),1,3)
cor_image(corr_residual)
```

No violation of colinearity and contributes to the model.

`pair_cor` is a function that goes through `base model` and access all parameters to find the fitted values.

# 8 Model Control

```{r}
spflow_formula <- log(1 + TRIPS) ~
  O_(BUSSTOP_COUNT + AGE25_64) +
  D_(SCHOOL_COUNT + BUSINESS_COUNT + RETAILS_COUNT + FINSERV_COUNT) +
  P_(log(DISTANCE + 1))
```

## Model 1

The estimation_method argument must be one of c("s2sls", "mle", "mcmc", "ols")

```{r}
model_control_1 <- spflow_control(
  estimation_method = "mle",
  model = "model_1"
)

mle_model_1 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control_1
)

mle_model_1
```

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))

spflow_moran_plots(mle_model_1)
```

## Model 8

```{r}
model_control_8 <- spflow_control(
  estimation_method = "mle",
  model = "model_8"
)

mle_model_8 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control_8
)

mle_model_8
```

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))

spflow_moran_plots(mle_model_8)
```

## Model 9

```{r}
model_control_9 <- spflow_control(
  estimation_method = "mle",
  model = "model_9"
)

mle_model_9 <- spflow(
  spflow_formula,
  spflow_networks = mpsz_multi_net,
  estimation_control = model_control_9
)

mle_model_9
```

```{r}
old_par <- par(mfrow = c(1,3),
               mar = c(2,2,2,2))

spflow_moran_plots(mle_model_9)
```
