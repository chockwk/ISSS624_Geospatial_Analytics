[
  {
    "objectID": "useful_links.html",
    "href": "useful_links.html",
    "title": "Useful Links",
    "section": "",
    "text": "Quarto Markdown Basics documents the variation of markdown as its underlying document syntax.\nQuarto Callbout Blocks outlines the creation of callouts in markdown.\nQGIS"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/data/ParseJson.html",
    "href": "Take_home_Ex/Take_home_Ex01/data/ParseJson.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "import pandas as pd\nimport json\n\n\n# Load JSON data from file\nwith open('BusStops202310.json', 'r') as file:\n    data = json.load(file)\n\n# Extract bus stop information from the 'value' key\nbus_stops = data['value']\n\n# Create a DataFrame with the specified columns\ndf_bus_stops = pd.DataFrame(bus_stops, columns=[\"BusStopCode\", \"RoadName\", \"Description\", \"Latitude\", \"Longitude\"])\n\n# Save the DataFrame to a CSV file\ndf_bus_stops.to_csv('bus_stops.csv', index=False)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'BusStops202310.json'"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Untitled.html",
    "href": "Take_home_Ex/Take_home_Ex01/Untitled.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "import pandas as pd\nimport json\n\n\n# Load JSON data from file\nwith open('BusStops202310.json', 'r') as file:\n    data = json.load(file)\n\n# Extract bus stop information from the 'value' key\nbus_stops = data['value']\n\n# Create a DataFrame with the specified columns\ndf_bus_stops = pd.DataFrame(bus_stops, columns=[\"BusStopCode\", \"RoadName\", \"Description\", \"Latitude\", \"Longitude\"])\n\n# Save the DataFrame to a CSV file\ndf_bus_stops.to_csv('bus_stops.csv', index=False)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'BusStops202310.json'"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/data/MPSZ-2019.html",
    "href": "In_class_Ex/In_class_Ex01/data/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex02/In_class_Ex02.html",
    "href": "In_class_Ex/In_class_Ex02/In_class_Ex02.html",
    "title": "Spatial Weights using sfdep",
    "section": "",
    "text": "1.1 Overview\nLearning Objective: 1. Derive contiguity weights using Queen’s method using st_weights() 2. Compute local Moran’s I of GDPPC using local_moran() 3.\n\n\n1.2 Load packages\nThe following R packages are loaded:\nknitr is for general-purpose tool for dynamic reporting. sf performs Spatial vector data encoding. spdep performs geospatial analysis. sfdep integrates sf objects and tidyverse. tmap plots geographic maps. tidyverse for general data-wrangling. plotly for general data visualisation.\n\npacman::p_load(knitr, sf, sfdep, tmap, tidyverse, sf, plotly)\n\n\n\n1.3 Import data\n\nhunan_geohunan_indhunanGDPPC\n\n\nhunan_geo is a geospatial data set of the Hunan province administrative boundary layer at county level in ESRI shapefile format.\n\nhunan_geo &lt;- st_read(dsn = \"data/geospatial\", layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/In_class_Ex/In_class_Ex02/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nhunan_ind contains selected Hunan’s local development indicators in 2012, such as avg_wage, GDP, GDPPC (GDP per county), etc.\n\nhunan_ind &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\nhead(hunan_ind, n=5)\n\n# A tibble: 5 × 29\n  County  City    avg_w…¹ depos…²   FAI Gov_Rev Gov_Exp    GDP GDPPC   GIO  Loan\n  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Anhua   Yiyang    30544  10967  6832.    457.   2703  13225  14567 9277. 3955.\n2 Anren   Chenzh…   28058   4599. 6386.    221.   1455.  4941. 12761 4189. 2555.\n3 Anxiang Changde   31935   5517. 3541     244.   1780. 12482  23667 5109. 2807.\n4 Baojing Hunan …   30843   2250  1005.    193.   1379.  4088. 14563 3624. 1254.\n5 Chaling Zhuzhou   31251   8241. 6508.    620.   1947  11585  20078 9158. 4287.\n# … with 18 more variables: NIPCR &lt;dbl&gt;, Bed &lt;dbl&gt;, Emp &lt;dbl&gt;, EmpR &lt;dbl&gt;,\n#   EmpRT &lt;dbl&gt;, Pri_Stu &lt;dbl&gt;, Sec_Stu &lt;dbl&gt;, Household &lt;dbl&gt;,\n#   Household_R &lt;dbl&gt;, NOIP &lt;dbl&gt;, Pop_R &lt;dbl&gt;, RSCG &lt;dbl&gt;, Pop_T &lt;dbl&gt;,\n#   Agri &lt;dbl&gt;, Service &lt;dbl&gt;, Disp_Inc &lt;dbl&gt;, RORP &lt;dbl&gt;, ROREmp &lt;dbl&gt;, and\n#   abbreviated variable names ¹​avg_wage, ²​deposite\n\n\n\n\nWe will perform relational join of the attribute table of hunan_geo spatial polygons dataFrame with the attribute fields of hunan_ind dataframe to create a fused dataset hunan.\n\n\n\n\n\n\nNote\n\n\n\nin order to retain the geospatial properties, the left data frame must be sf data frame.\n\n\n\nhunan &lt;- left_join(hunan_geo,hunan_ind) %&gt;% \n  select(1:4, 7, 15)\n\n\n\n\nGDPPC = st_read(\"data/aspatial/Hunan_GDPPC.csv\")\n\nReading layer `Hunan_GDPPC' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/In_class_Ex/In_class_Ex02/data/aspatial/Hunan_GDPPC.csv' \n  using driver `CSV'\n\nGDPPC$Year &lt;- as.numeric(as.character(GDPPC$Year))\nglimpse(GDPPC)\n\nRows: 1,496\nColumns: 3\n$ Year   &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County &lt;chr&gt; \"Longshan\", \"Changsha\", \"Wangcheng\", \"Ningxiang\", \"Liuyang\", \"Z…\n$ GDPPC  &lt;chr&gt; \"3469.00\", \"24612.00\", \"14659.00\", \"11687.00\", \"13406.00\", \"854…\n\n\n\n\n\n\n\n1.4 Explore data\nStep 1: Derive contiguity weights using Queen’s method using st_weights() There are three variables: nb is the neighbour list object style is W wt is the weight matrix\nst_weights()\n\nwm_q = hunan %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb, style = \"W\"), .before = 1)\nglimpse(wm_q)\n\nRows: 88\nColumns: 9\n$ nb        &lt;nb&gt; &lt;2, 3, 4, 57, 85&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 85&gt;, &lt;1, 3,…\n$ wt        &lt;list&gt; &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.25…\n$ NAME_2    &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Chan…\n$ ID_3      &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2111…\n$ NAME_3    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ ENGTYPE_3 &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"Coun…\n$ County    &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", \"Li…\n$ GDPPC     &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7066…\n$ geometry  &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.2288 2…\n\n\nStep 2: Compute local Moran’s I of GDPPC using local_moran()\n\nlisa = wm_q %&gt;% \n  mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 99), .before = 1) %&gt;% \n  unnest(local_moran)\nglimpse(lisa)\n\nRows: 88\nColumns: 21\n$ ii           &lt;dbl&gt; -1.468468e-03, 2.587817e-02, -1.198765e-02, 1.022468e-03,…\n$ eii          &lt;dbl&gt; -1.191847e-03, 1.261342e-02, -2.458540e-02, 2.054280e-04,…\n$ var_ii       &lt;dbl&gt; 4.921572e-04, 8.352084e-03, 1.191731e-01, 5.084601e-06, 1…\n$ z_ii         &lt;dbl&gt; -0.012469049, 0.145144856, 0.036492528, 0.362338696, 0.14…\n$ p_ii         &lt;dbl&gt; 0.9900513961, 0.8845965035, 0.9708896367, 0.7170989450, 0…\n$ p_ii_sim     &lt;dbl&gt; 0.88, 0.94, 0.90, 0.66, 0.80, 0.70, 0.12, 0.16, 0.02, 0.2…\n$ p_folded_sim &lt;dbl&gt; 0.44, 0.47, 0.45, 0.33, 0.40, 0.35, 0.06, 0.08, 0.01, 0.1…\n$ skewness     &lt;dbl&gt; -1.0222309, -0.7639663, 1.2528141, 0.6705833, 0.7657104, …\n$ kurtosis     &lt;dbl&gt; 1.12521493, 0.34038445, 3.05243672, 0.09158164, -0.056729…\n$ mean         &lt;fct&gt; Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ median       &lt;fct&gt; High-High, High-High, High-High, High-High, High-High, Hi…\n$ pysal        &lt;fct&gt; Low-High, Low-Low, High-Low, High-High, High-High, High-L…\n$ nb           &lt;nb&gt; &lt;2, 3, 4, 57, 85&gt;, &lt;1, 57, 58, 78, 85&gt;, &lt;1, 4, 5, 85&gt;, &lt;1,…\n$ wt           &lt;list&gt; &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0.2, 0.2, 0.2, 0.2, 0.2&gt;, &lt;0…\n$ NAME_2       &lt;chr&gt; \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"Changde\", \"C…\n$ ID_3         &lt;int&gt; 21098, 21100, 21101, 21102, 21103, 21104, 21109, 21110, 2…\n$ NAME_3       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ ENGTYPE_3    &lt;chr&gt; \"County\", \"County\", \"County City\", \"County\", \"County\", \"C…\n$ County       &lt;chr&gt; \"Anxiang\", \"Hanshou\", \"Jinshi\", \"Li\", \"Linli\", \"Shimen\", …\n$ GDPPC        &lt;dbl&gt; 23667, 20981, 34592, 24473, 25554, 27137, 63118, 62202, 7…\n$ geometry     &lt;POLYGON [°]&gt; POLYGON ((112.0625 29.75523..., POLYGON ((112.228…\n\n\nThe output of local_moran() is a sf data.frame containing the following columns: ii: local moran statistic eii: expectation of local moran statistic var_ii: variance of local moran statistic z_ii: standard deviate of local moran statistic p_ii: probability of local moran statistic p_ii_sim p_folded_sim\nStep 3: Create a time series cube using spacetime()\n\nGDPPC_st = spacetime(GDPPC, hunan, .loc_col = \"County\", .time_col = \"Year\")\nglimpse(GDPPC_st)\n\nRows: 1,496\nColumns: 3\n$ Year   &lt;dbl&gt; 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 2005, 200…\n$ County &lt;chr&gt; \"Longshan\", \"Changsha\", \"Wangcheng\", \"Ningxiang\", \"Liuyang\", \"Z…\n$ GDPPC  &lt;chr&gt; \"3469.00\", \"24612.00\", \"14659.00\", \"11687.00\", \"13406.00\", \"854…\n\n\n\nis_spacetime_cube(\"GDPPC_st\")\n\n[1] FALSE\n\n\n\nGDPPC_nb = GDPPC_st %&gt;% \n  activate(\"geometry\") %&gt;% \n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1), .before = 1) %&gt;% \n  set_nbs(\"nb\") %&gt;% \n  set_wts(\"wt\")\n\nStep 5: Compute Gi*\n\n#gi_stars = GDPPC_nb %&gt;% \n#  group_by(Year) %&gt;% \n#  mutate(gi_star = local_gstar_perm(GDPPC, nb, wt)) %&gt;%\n#  tidyr::unnest(gi_stars)\n\nStep 6: Performing Emerging Hotspot Analysis\n\n#ehsa = emerging_hotspot_analysis(x = GDPPC_st, .var = \"GDPPC\", k = 1, nsim = 99)\n\n\n\n1.5 Plot data"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "Welcome to ISSS624 Applied Geospatial Analytics, Winter 2024 class!\nThis page documents my learning journey of geospatial analytics taught by Prof Kam Tin Seong.\n\nMap Explore Stickerfrom Map Stickers"
  },
  {
    "objectID": "About/definitions.html",
    "href": "About/definitions.html",
    "title": "Definitions",
    "section": "",
    "text": "Libraries\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\n\ndefinitions=FileAttachment(\"Definitions.csv\").csv({ typed: true })\n\n\n\n\n\n\nGeospatial Dictionary\n\n\n\nWord\nDescription"
  },
  {
    "objectID": "About/definitions.html#find-the-word",
    "href": "About/definitions.html#find-the-word",
    "title": "Definitions",
    "section": "",
    "text": "Libraries\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\n\ndefinitions=FileAttachment(\"Definitions.csv\").csv({ typed: true })\n\n\n\n\n\n\nGeospatial Dictionary\n\n\n\nWord\nDescription"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html",
    "title": "Geospatial Data Wrangling with R",
    "section": "",
    "text": "In this Hands_on_Ex01, we will handle geospatial data in R using two packages, namely tidyverse and sf.\nLearning Objectives:\n\nIntroduction to R packages and functions that support geospatial data.\nUnderstand geospatial file formats and coordinate reference systems.\nCreate a simple feature (sf) dataframe.\nPerform geoprocessing tasks.\nPerform exploratory data analysis."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#st_geometry",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#st_geometry",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.4.1 st_geometry()",
    "text": "1.4.1 st_geometry()\nst_geometry() st_set_geometry() st_drop_geometry() can get, set, replace or rename geometry from an sf object. For this exercise, we will use st_geometry() to display basic information of the feature class, such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\nmpszpreschoolcyclingpath\n\n\nmpsz contains a column geometry where it indicates the object is a multipolygon in XY dimension.\n\nst_geometry(mpsz)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nA multipolygon represent areas (polygons), typically complex ones with areas/holes inside, or consisting of multiple disjoint parts. Here is an example of a multipolygon and an object within the column geometry where its relations are represented as ((X1,Y1), (X2,Y2),..).\n\n\n\n\n\n\nmpsz[[16]][[1]]\n\n\n\npreschool contains a column geometry where it indicates the object is a point z in XYZ dimension. The statistics reveal zmin and zmax as zero and the observation is confirmed by a visual check of the data.\n\nst_geometry(preschool)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\n\n\ncyclingpath contains a column geometry where it indicates the object is a multilinestring in XY dimension.\n\nst_geometry(cyclingpath)\n\nGeometry set for 2558 features \nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nA multilinestring represent one ground feature made of one or multiple line strings. Here is an example of multilinestring and two objects where they consist of 2 and 5 lines and are represented as ((X1 Y1, X2 Y2, …)) within the column geometry.\n\n\n\n\n\n\ncyclingpath[[3]][[1]]\ncyclingpath[[3]][[46]]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#glimpse",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#glimpse",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.4.2 glimpse()",
    "text": "1.4.2 glimpse()\nglimpse() transposes the columns in a dataset and makes it possible to see the column name, data type and values in every column in a data frame.\n\nmpszpreschoolcyclingpath\n\n\n\nglimpse(mpsz)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\n\n\n\nglimpse(preschool)\n\nRows: 2,290\nColumns: 3\n$ Name        &lt;chr&gt; \"kml_1\", \"kml_2\", \"kml_3\", \"kml_4\", \"kml_5\", \"kml_6\", \"kml…\n$ Description &lt;chr&gt; \"&lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Att…\n$ geometry    &lt;POINT [°]&gt; POINT Z (103.8072 1.299333 0), POINT Z (103.826 1.31…\n\n\n\n\n\nglimpse(cyclingpath)\n\nRows: 2,558\nColumns: 3\n$ PLANNING_A &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ PLANNING_1 &lt;chr&gt; \"BEDOK\", \"BEDOK\", \"BEDOK\", \"TAMPINES\", \"TAMPINES\", \"TAMPINE…\n$ geometry   &lt;MULTILINESTRING [m]&gt; MULTILINESTRING ((39782.85 ..., MULTILINEST…"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#head",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#head",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.4.3 head()",
    "text": "1.4.3 head()\nhead() returns the first defined n rows of a vector, matrix, table, data frame or function.\ntail() is the reversed function.\n\nmpszpreschoolcyclingpath\n\n\n\nhead(mpsz, n=5)\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\n\n\n\nhead(preschool, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.8048 ymin: 1.299333 xmax: 103.8409 ymax: 1.435024\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n2 kml_2\n3 kml_3\n4 kml_4\n5 kml_5\n                                                                                                                                                                                                                                                                                                                                                                                                Description\n1           &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                    &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                               &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (103.8072 1.299333 0)\n2  POINT Z (103.826 1.312839 0)\n3 POINT Z (103.8409 1.348843 0)\n4 POINT Z (103.8048 1.435024 0)\n5   POINT Z (103.839 1.33315 0)\n\n\n\n\n\nhead(cyclingpath, n=5)\n\nSimple feature collection with 5 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 39598.41 ymin: 34811.14 xmax: 40031.89 ymax: 37075.99\nProjected CRS: SVY21\n  PLANNING_A PLANNING_1                       geometry\n1       &lt;NA&gt;      BEDOK MULTILINESTRING ((39782.85 ...\n2       &lt;NA&gt;      BEDOK MULTILINESTRING ((39931.51 ...\n3       &lt;NA&gt;      BEDOK MULTILINESTRING ((40031.89 ...\n4       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39958.38 ...\n5       &lt;NA&gt;   TAMPINES MULTILINESTRING ((39652.87 ..."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#plot",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#plot",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.5.1 plot()",
    "text": "1.5.1 plot()\nplot() takes parameters for specifying points in the diagram. At its simplest, it can plot two numbers against each other. With datasets, it can generate maps and plot the specified columns/attributes, with default up to nine plots or maximum all plots.\n\nmpszpreschoolcyclingpath\n\n\nmpsz contains 15 attributes and we will generate a map for each of the attributes as shown below. Note: The column geometry is not considered as an attribute for mpsz, similar for the subsequent datasets.\n\nplot(mpsz, max.plot = 15)\n\n\n\n\nWe can plot the geometry map of mpsz through plot() and st_geometry().\n\nplot(st_geometry(mpsz))\n\n\n\n\nWe can select a specific attribute of mpsz and generate its map accordingly.\n\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\npreschool has two attributes and plot() generates two maps with points based on object name and center details.\n\nplot(preschool)\n\n\n\n\nBased on visual observation, the geometry map is the same as the description map of preschool. We also note that the geometry map of preschool differs from mpsz based on the different geometry type.\n\nplot(st_geometry(preschool))\n\n\n\n\n\n\ncyclingpath has two attributes. However, PLANNING_A does not generate any map due to missing values. The planning area and geometry maps plot the cycling paths as lines.\n\nplot(cyclingpath[\"PLANNING_1\"])\n\n\n\n\n\nplot(st_geometry(cyclingpath))\n\n\n\n\n\n\n\nOverall, the three geospatial datasets are spatial information of different purposes sharing the same Singapore map. However, the geospatial datasets uses two CRS; svy21 and wgs84."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#assign-epsg-code",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#assign-epsg-code",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.6.1 Assign EPSG code",
    "text": "1.6.1 Assign EPSG code\nOne of the common issues for geospatial data is the missing coordinate system of the source data or wrongly assigned during the importing process. Although mpsz data frame is projected in SVY21, the CRS indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for SVY21 should be 3414. More information here.\n\nBeforeAfter\n\n\n\nst_crs(mpsz)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\nWe will assign the correct EPSG to mpsz using st_set_crs().\n\nmpsz3414 &lt;- st_set_crs(mpsz,3414)\nst_crs(mpsz3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#transform-wgs84-to-svy21",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#transform-wgs84-to-svy21",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.6.2 Transform WGS84 to SVY21",
    "text": "1.6.2 Transform WGS84 to SVY21\nIt is common to transform the geographic coordinate system (3D latitude and longitude) to projected coordinate system (2D planar coordinates) based on the analysis for the use of distance or/and area measurements.\nWe will transform preschool from WGS84 to SVY21\n\npreschool3414 &lt;- st_transform(preschool, crs=3414)\nst_crs(preschool3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#create-a-simple-feature-object",
    "href": "Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html#create-a-simple-feature-object",
    "title": "Geospatial Data Wrangling with R",
    "section": "1.6.3 Create a simple feature object",
    "text": "1.6.3 Create a simple feature object\nst_as_sf() create an sf object by taking arguments such as longitude and latitude as the coordinates. Let’s assume that the coordinate system used to reference the latitude and longitude coordinates is WGS84 with crs 4236, then transform it to SVY21 with crs 3414.\n\nTransformView\n\n\nst_as_sf() drops the columns used to create geometry by default. The remove = F specification ensures the longitude and latitude columns are retained, which may be used plots subsequently.\n\nairbnb_sf &lt;- st_as_sf(airbnb,\n                      coords = c(\"longitude\",\"latitude\"),\n                      crs = 4326,\n                      remove = F) %&gt;% \n  st_transform(crs = 3414)\n\n\n\nNew column geometry is created and the geometry type is point.\n\nglimpse(airbnb_sf)\n\nRows: 3,483\nColumns: 19\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Villa in Singapore · ★4.44 · 2 bedroom…\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ latitude                       &lt;dbl&gt; 1.34537, 1.34754, 1.34531, 1.29015, 1.2…\n$ longitude                      &lt;dbl&gt; 103.9589, 103.9596, 103.9610, 103.8081,…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; 150, 80, 80, 55, 69, 220, 85, 75, 45, 7…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 60, 60, 92, 92, 60, 60, 92,…\n$ number_of_reviews              &lt;dbl&gt; 20, 24, 47, 22, 17, 12, 133, 18, 6, 81,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.14, 0.16, 0.31, 0.17, 0.12, 0.09, 0.9…\n$ calculated_host_listings_count &lt;dbl&gt; 5, 5, 5, 52, 52, 5, 7, 52, 52, 7, 7, 1,…\n$ availability_365               &lt;dbl&gt; 89, 89, 89, 275, 274, 89, 365, 365, 365…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 3, 0, 0, 1, 3, 0, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html",
    "title": "2a Spatial Weights and Application",
    "section": "",
    "text": "Spatial weights are a fundamental concept in spatial analysis and spatial statistics. They are used to quantify the spatial relationships between geographic locations in a dataset. Spatial weights capture the relation of one location is to another based on their spatial proximity.\nThere are two types of spatial weights:\n\nContiguityDistance\n\n\nContiguity-based weights define two spatial units share a common border of non-zero length.\n\nRook criterion defines neighbors by the existence of a common edge between two spatial units.\nQueen criterion defines neighbors as spatial units sharing a common edge or a common vertex.\nBishop’s approach relies on a common vertex.\n\n\n\nDistance-based weights assign weights based on the Euclidean or other distance measures between two locations or points. Locations closer to each other receive higher weights.\n\nDistance/radii-based\nNumber/kth neighbor-based\n\n\n\n\n\n\n\n\n\nLearning Objectives:\n\nCompute Global Spatial Autocorrelation (GSA) statistics using spdep and plot Moran scatterplot and spatial correlogram.\nCompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers using spdep\nCompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area using spdep package"
  },
  {
    "objectID": "mac_user_tips.html",
    "href": "mac_user_tips.html",
    "title": "Mac User Tips",
    "section": "",
    "text": "Getting Started\n\nInstall R and R studio from posit for macOS 11 and higher.\nInstall git\nNote: Git recommendations did not work; I have tested Homebrew, MacPorts and Xcode.\nSeveral packages requires *Rtools* and works under Windows. To resolve, type the following codes in console:\n\na\\) install.packages(“remotes”)\nb\\) remotes::install_github(“rmacoslib/macrtools”)\nc\\) install.packages(“httr2”)\nNote: httr2 is a package that provides tools for creating and modifying HTTP requests, then performing them and processing the results. ‘httr2’ is a modern re-imagining of ‘httr’ that uses a pipe-based interface and solves more of the problems that API wrapping packages face.\n\nSet up git by typing usethis::use_git() in console. When prompted “*Is it ok to commit them?*”, selection “*Not now*”. You will observe an icon GI+ appeared in toolbar menu.\nCreate a github token through the following codes in console:\n\na\\) install.packages(c(“gh”, “gitcreds”))\nb\\) usethis::create_github_token()\nc\\) gitcreds::gitcreds_set() and enter your token\nd\\) gh::gh_whoami()\n\nSet up new github repository for the project by typing usethis::use_github() in console.\nPublish webpage through Netlify: https://www.netlify.com.\n\na\\) Sign up through Github account.\nb\\) Add a new site and indicate \\_site in *Publish directory*.\nc\\) Deploy site.\n\n\nTroubleshooting Journey\n\nGitGitHubNelifyQGIS\n\n\n\n\n\n\n\n\nWarning\n\n\n\nTo https://github.com/chockwk/ISSS624_Geospatial_Analytics.git ! [rejected] HEAD -&gt; main (fetch first) error: failed to push some refs to ‘https://github.com/chockwk/ISSS624_Geospatial_Analytics.git’ hint: Updates were rejected because the remote contains work that you do not have locally. This is usually caused by another repository pushing to the same ref. You may want to first integrate the remote changes (e.g., ‘git pull …’) before pushing again. See the ‘Note about fast-forwards’ in ‘git push –help’ for details.\n\n\nStep 1: Use the git status command to see the status of the repository and the changes that have been made.\ngit status\nStep 2: Merge or rebase the local changes with the changes from the remote main branch. Choose one of the following approaches:\n\nMerge:\n\ngit merge origin/main\nThis will create a new merge commit that combines your changes with the remote changes. Resolve any merge conflicts if they occur.\n\nRebase (if you want a linear history):\n\nIf you want a linear history (without merge commits), you can rebase your local branch onto the updated remote branch:\ngit rebase origin/main\nStep 3: Push the changes to the remote repository:\ngit push origin main\n\n\n\n\n\n\nNote\n\n\n\nAuto-merging Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.qmd CONFLICT (content): Merge conflict in Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.qmd Auto-merging _quarto.yml CONFLICT (content): Merge conflict in _quarto.yml Auto-merging _site/Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html CONFLICT (content): Merge conflict in _site/Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html Auto-merging _site/search.json CONFLICT (content): Merge conflict in _site/search.json Automatic merge failed; fix conflicts and then commit the result.\n\n\nStep 4: Open the files that have conflicts in a text editor or code editor. In this case, the files with conflicts are:\nHands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.qmd _quarto.yml _site/Hands_on_Ex/Hands_on_Ex01/Hands_on_Ex01.html _site/search.json\nIn these files, you will see sections surrounded by conflict markers like this: &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD // Your local changes ======= // Remote changes “&gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main\nThe section between &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD and ======= represents your local changes. The section between ======= and &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main represents the remote changes. Manually review and edit the conflicting sections to resolve the differences. Decide which changes to keep and which to discard. You can delete the conflict markers (&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt; origin/main) once you’ve resolved the conflicts.\nAfter resolving the conflicts, save the edited files."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html",
    "href": "Hands_on_Ex/Hands_on_Ex03/Hands_on_Ex03.html",
    "title": "Spatial Interactions",
    "section": "",
    "text": "1.1 Overview\n\n\n1.2 Load packages\n\npacman::p_load(tmap, sf, DT, stplanr, performance, ggpubr, tidyverse)\n\n\nThe downloaded binary packages are in\n    /var/folders/yb/8mcgsm5s7dn_6hxtm7czbmy40000gn/T//Rtmp3FbXeG/downloaded_packages\n\nThe downloaded binary packages are in\n    /var/folders/yb/8mcgsm5s7dn_6hxtm7czbmy40000gn/T//Rtmp3FbXeG/downloaded_packages\n\n\n\n\n1.3 Import data\n\n\n1.4 Explore data\n\n\n1.5 Plot data"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Learning Objectives:\n\nCompute Global Spatial Autocorrelation (GSA) statistics using spdep by\n\nMoran scatterplot,\nCompute and plot spatial correlogram using spdep\n\nCompute Local Indicator of Spatial Association (LISA) statistics to detect clusters and outliers using spdep\nCompute Getis-Ord’s Gi-statistics to detect hot spot or/and cold spot area using spdep\nVisualize the analysis output by using tmap package\n\nGeospatial Analytic Flowchart:\n\nflowchart LR\n  A[Evaluate spatial policy] --&gt; B(Apply spatial statistical methods)\n  B --&gt; C{Geographical Distribution}\n  C --&gt; D[Even Distribution]\n  D --&gt; F[Where are the clusters?]\n  C --&gt; E[Uneven Distribution]\n  E --&gt; G[Any observable clusters?]\n\n\n\nflowchart LR\n  A[Evaluate spatial policy] --&gt; B(Apply spatial statistical methods)\n  B --&gt; C{Geographical Distribution}\n  C --&gt; D[Even Distribution]\n  D --&gt; F[Where are the clusters?]\n  C --&gt; E[Uneven Distribution]\n  E --&gt; G[Any observable clusters?]"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-1-compute-contiguity-spatial-weights",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-1-compute-contiguity-spatial-weights",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 1: Compute Contiguity Spatial Weights",
    "text": "Step 1: Compute Contiguity Spatial Weights\nWe will construct the spatial weights of the study area to define the neighbourhood relationships between the geographical units or county in the study area. The Queen contiguity weight matrix will be used to capture all common boundary of each county in Hunan.\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-2-construct-row-standardised-weights-matrix",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-2-construct-row-standardised-weights-matrix",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 2: Construct Row-standardised Weights Matrix",
    "text": "Step 2: Construct Row-standardised Weights Matrix\nWe assign equal weights (style=“W”) to each neighboring polygon. The weights are obtained by the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values.\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-3-perform-statistical-testing.",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-3-perform-statistical-testing.",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 3: Perform statistical testing.",
    "text": "Step 3: Perform statistical testing.\nH0: There is no spatial autocorrelation between the Hunan counties.\nH1: There is spatial autocorrelation between the Hunan counties.\n\nMoran’s IMonte Carlo Moran’s IGeary’s CMonte Carlo Geary’s C\n\n\nMoran’s I is a test for spatial autocorrelation, which assesses whether there is spatial dependence or clustering of values among neighboring geographic units, such as regions, points, or polygons, in a spatial dataset. It determines if nearby locations tend to have similar values or spatial randomness. Where Pearson’s correlation coefficient measures the linear association between two continuous variable, Moran’s I is specifically designed for spatial data analysis.\nMoran’s I values range from -1 to 1, where -1 indicates perfect dispersion (values at one location are dissimilar to values at neighboring locations), 0 indicates spatial randomness (no spatial autocorrelation), 1 indicates perfect clustering (values at one location are identical to values at neighboring locations).\nMoran’s I relies on spatial weights or neighborhood matrices that define how locations are connected. It is sensitive to how the weights are defined (e.g., contiguity-based weights or distance-based weights).\nmoran.test() is the Moran’s test for spatial autocorrelation using a spatial weights matrix in weights list form. The assumptions underlying the test are sensitive to the form of the graph of neighbour relationships and other factors, and results may be checked against those of moran.mc permutations.\n\nmoran.test(hunan$GDPPC, listw=rswm_q, zero.policy = TRUE, na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nH0: There is no spatial autocorrelation between the Hunan counties.\nH1: There is spatial autocorrelation between the Hunan counties.\nThe p-value associated with the Moran I statistic (p-value = 1.095e-06) is less than 0.05, indicates there is a significant spatial pattern in the GDPPC values in Hunan. Similarly, the Moran I statistic of 0.300749970 indicates a positive spatial autocorrelation where the regions in Hunan with similar GDPPC values tend to be spatially clustered together.\n\n\nMonte Carlo Moran’s I is a statistical technique used to assess the significance of the Moran’s I statistic in spatial autocorrelation analysis. It is an extension of Moran’s I test and determine whether the observed spatial autocorrelation is statistically significant or occurred by random chance through simulation. It generates a large number of random spatial permutations of the data and calculate Moran’s I for each permutation. Monte Carlo Moran’s I is useful when sample sizes are small or when the assumption of normality is not met.\nmoran.mc() is a permutation test for Moran’s I statistic calculated by using nsim random permutations of x for the given spatial weighting scheme, to establish the rank of the observed statistic in relation to the nsim simulated values.\nWe will perform permutation test for Moran’s I statistic by using moran.mc() through 1000 simulation.\n\nset.seed(1234)\nbperm_moran = moran.mc(hunan$GDPPC, listw=rswm_q, nsim=999, zero.policy = TRUE, na.action=na.omit)\nbperm_moran\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe Monte Carlo simulation was performed with 1000 simulations. The observed Moran’s I statistic is 0.30075 and indicates positive spatial autocorrelation where the regions with similar GDPPC values tend to be spatially clustered together in Hunan. The p-value of 0.001 suggests a significant spatial pattern in the GDPPC values in Hunan and we reject null hypothesis.\n\n\nGeary’s C statistics is a measure used to assess spatial autocorrelation in a dataset, similar to Moran’s I statistics. Geary’s C is sensitive to spread and detects dispersion (negative spatial autocorrelation) and clustering while Moran’s I is primarily focused on the clustering aspect of spatial autocorrelation.\nGeary’s C values range from 0 to 2 where 1 suggests spatial randomness, &lt;1 indicate positive spatial autocorrelation (clustering) and &gt;1 indicate negative spatial autocorrelation (dispersion).\ngeary.test() is a function for Geary’s test for spatial autocorrelation using a spatial weights matrix in weights list form. The assumptions underlying the test are sensitive to the form of the graph of neighbour relationships and other factors, and results may be checked against those of geary.mc permutations.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nThe p-value associated with the Geary C statistic (0.0001526) is less than 0.05, indicating there is a significant spatial pattern in the GDPPC values in Hunan. Similarly, the Geary C statistic (0.6907223) is less than 1, it indicates negative spatial autocorrelation where the neighboring areas are less similar than expected if the variable were randomly distributed across space.\n\n\ngeary.mc() is a permutation test for Geary’s C statistic calculated by using nsim random permutations of x for the given spatial weighting scheme, to establish the rank of the observed statistic in relation to the nsim simulated values.\n\nset.seed(1234)\nbperm_geary = geary.mc(hunan$GDPPC, listw=rswm_q, nsim=999)\nbperm_geary\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\nThe Monte Carlo simulation was performed with 1000 simulations. The observed Geary C statistic is 0.69072 and indicates negative spatial autocorrelation where the regions with similar GDPPC values tend to be spatially clustered together in Hunan. The p-value of 0.001 suggests a significant spatial pattern in the GDPPC values in Hunan and we reject null hypothesis."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-4-visualisation",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-4-visualisation",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 4: Visualisation",
    "text": "Step 4: Visualisation\n\nMonte Carlo Moran’s IMonte Carlo Geary’s CMoran’s IGeary’s C\n\n\nThe histogram is approximately symmetric with a slight negative skew. The red line at v=0 may represent the observed Moran’s I value against which the simulated values are being compared.\n\nhist(bperm_moran$res, freq=TRUE, breaks=20, xlab=\"Simulated Moran's I\")\nabline(v=0, col=\"red\") \n\n\n\n\n\nlibrary(ggplot2)\n\nres_df &lt;- data.frame(bperm_moran.res = bperm_moran$res)\n\ngg_mcmI &lt;- ggplot(res_df, aes(x=bperm_moran.res)) +\n  geom_histogram(binwidth = 0.02, fill=\"grey\", color=\"black\") +\n  geom_vline(aes(xintercept=mean(bperm_moran$res)), color=\"red\", linetype=\"dashed\", linewidth=1) +\n  labs(title=\"Histogram of Simulated Moran's I\",\n       x=\"Simulated Moran's I\",\n       y=\"Frequency\") +\n  theme_minimal() +\n  theme(\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.background = element_blank()\n  )\nprint(gg_mcmI)\n\n\n\n\n\nsummary(bperm_moran$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\nThe mean of -0.015 suggests that the average of these simulations is slightly negative.\n\nmean(bperm_moran$res[1:999])\n\n[1] -0.01504572\n\n\nThe variance of 0.0043 indicate a low degree of spread in the simulated Moran’s I values around the mean.\n\nvar(bperm_moran$res[1:999])\n\n[1] 0.004371574\n\n\n\n\n\nhist(bperm_geary$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\nsummary(bperm_geary$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\nThe mean of 1.004402 suggests that the average of these simulations is slightly negative.\n\nmean(bperm_geary$res[1:999])\n\n[1] 1.004402\n\n\nThe variance of 0.007436493 indicate a low degree of spread in the simulated Moran’s I values around the mean.\n\nvar(bperm_geary$res[1:999])\n\n[1] 0.007436493\n\n\n\n\n\nMI_corr &lt;- sp.correlogram(wm_q, hunan$GDPPC, order=6, method=\"I\", style=\"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n\nGC_corr &lt;- sp.correlogram(wm_q, hunan$GDPPC, order=6, method=\"C\", style=\"W\")\nplot(GC_corr)\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-1-compute-local-morans-i.",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-1-compute-local-morans-i.",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 1: Compute Local Moran’s I.",
    "text": "Step 1: Compute Local Moran’s I.\nlocalmoran() calculates the local spatial statistic Moran’s I for each zone based on the spatial weights object used. The values returned include a Z-value, and may be used as a diagnostic tool.\nlocalmoran() function returns a matrix of values whose columns are:\nIi: the local Moran’s I statistics E.Ii: the expectation of local moran statistic under the randomisation hypothesis Var.Ii: the variance of local moran statistic under the randomisation hypothesis Z.Ii:the standard deviate of local moran statistic Pr(): the p-value of local moran statistic\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI, n=5)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n\n\nprintCoefmat() is a utility function to provide a flexible interface with smart defaults such that often, only x needs to be specified.\n\nprintCoefmat(data.frame(localMI[fips,], row.names = hunan$County[fips]), check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-2-append-the-local-morans-i-dataframe-localmi-into-hunan-spatial-polygon-dataframe.",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-2-append-the-local-morans-i-dataframe-localmi-into-hunan-spatial-polygon-dataframe.",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 2: Append the local Moran’s I dataframe localMI into hunan spatial polygon dataframe.",
    "text": "Step 2: Append the local Moran’s I dataframe localMI into hunan spatial polygon dataframe.\n\nhunan.localMI = cbind(hunan, localMI) %&gt;% \n  rename(Pr.Ii = Pr.z....E.Ii..)"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-3-plot-local-moran-i",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-3-plot-local-moran-i",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 3: Plot local Moran I",
    "text": "Step 3: Plot local Moran I\n\nLocal Moran I StatisticsLocal Moran I p-values\n\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", style = \"pretty\", palette = \"RdBu\", midpoint = NA) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(title = \"Local Moran I Statistics\")\n\n\n\n\n\n\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = \"-Blues\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(title = \"Local Moran's I p-values\")"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-4-create-lisa-cluster-map",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-4-create-lisa-cluster-map",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 4: Create LISA Cluster Map",
    "text": "Step 4: Create LISA Cluster Map\n\nMoran ScatterplotMoran Scatterplot with standardised variableLISA\n\n\n\nnci = moran.plot(hunan$GDPPC, rswm_q, \n                 labels = as.character(hunan$County), \n                 xlab = \"GDPPC 2012\", ylab = \"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\nhunan$Z.GDPPC = scale(hunan$GDPPC) %&gt;% \n  as.vector\n\nnci_2 = moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels = as.character(hunan$County), \n                   xlab = \"z.GDPPC 2012\", ylab = \"Spatially Lag z.GDPPC 2012\")\n\n\n\n\n\n\nStep 1: prepare a LISA cluster map\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nStep 2: derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nStep 3: centering the local Moran’s around the mean\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])\n\nStep 4: and define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nStep 5: set a statistical significance level for the local Moran."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-5-analyze-hot-spot-and-cold-spot",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02b.html#step-5-analyze-hot-spot-and-cold-spot",
    "title": "Global and Local Measures of Spatial Autocorrelation",
    "section": "Step 5: Analyze Hot Spot and Cold Spot",
    "text": "Step 5: Analyze Hot Spot and Cold Spot"
  },
  {
    "objectID": "About/sf.html",
    "href": "About/sf.html",
    "title": "Spatial Manipulation with sf",
    "section": "",
    "text": "st_contains(x, y, ...) Identifies if y is within x (i.e. point within polygon)\nst_covered_by(x, y, ...) Identifies if x is completely within y (i.e. polygon completely within polygon)\nst_covers(x, y, ...) Identifies if any point from x is outside of y (i.e. polygon outside polygon)\nst_crosses(x, y, ...) Identifies if any geometry of x have commonalities with y\nst_disjoint(x, y, ...) Identifies when geometries from x do not share space with y\nst_equals(x, y, ...) Identifies if x and y share the same geometry\nst_intersects(x, y, ...) Identifies if x and y geometry share any space\nst_overlaps(x, y, ...) Identifies if geometries of x and y share space, are of the same dimension, but are not completely contained by each other\nst_touches(x, y, ...) Identifies if geometries of x and y share a common point but their interiors do not intersect\nst_within(x, y, ...) Identifies if x is in a specified distance to y"
  },
  {
    "objectID": "About/sf.html#geometric-confirmation",
    "href": "About/sf.html#geometric-confirmation",
    "title": "Spatial Manipulation with sf",
    "section": "",
    "text": "st_contains(x, y, ...) Identifies if y is within x (i.e. point within polygon)\nst_covered_by(x, y, ...) Identifies if x is completely within y (i.e. polygon completely within polygon)\nst_covers(x, y, ...) Identifies if any point from x is outside of y (i.e. polygon outside polygon)\nst_crosses(x, y, ...) Identifies if any geometry of x have commonalities with y\nst_disjoint(x, y, ...) Identifies when geometries from x do not share space with y\nst_equals(x, y, ...) Identifies if x and y share the same geometry\nst_intersects(x, y, ...) Identifies if x and y geometry share any space\nst_overlaps(x, y, ...) Identifies if geometries of x and y share space, are of the same dimension, but are not completely contained by each other\nst_touches(x, y, ...) Identifies if geometries of x and y share a common point but their interiors do not intersect\nst_within(x, y, ...) Identifies if x is in a specified distance to y"
  },
  {
    "objectID": "About/sf.html#geometric-operations",
    "href": "About/sf.html#geometric-operations",
    "title": "Spatial Manipulation with sf",
    "section": "Geometric operations",
    "text": "Geometric operations"
  },
  {
    "objectID": "About/Definitions/Definitions.html",
    "href": "About/Definitions/Definitions.html",
    "title": "Definitions",
    "section": "",
    "text": "Libraries\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\n\ndefinitions=FileAttachment(\"Definitions.csv\").csv({ typed: true })\n\n\n\n\n\n\nGeospatial Dictionary\n\n\n\nWord\nDescription"
  },
  {
    "objectID": "About/Definitions/Definitions.html#find-the-word",
    "href": "About/Definitions/Definitions.html#find-the-word",
    "title": "Definitions",
    "section": "",
    "text": "Libraries\n\nObservable stdlib — Core primitives for DOM manipulation, file handling, importing code, and much more.\nObservable Inputs — Standard inputs controls including sliders, drop-downs, tables, check-boxes, etc.\nObservable Plot — High level plotting library for exploratory data visualization.\n\n\ndefinitions=FileAttachment(\"Definitions.csv\").csv({ typed: true })\n\n\n\n\n\n\nGeospatial Dictionary\n\n\n\nWord\nDescription"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex03/In_class_Ex03.html",
    "href": "In_class_Ex/In_class_Ex03/In_class_Ex03.html",
    "title": "In_class_Ex03",
    "section": "",
    "text": "1.1 Overview\n\n\n1.2 Load packages\n\n\n1.3 Import data\n\n\n1.4 Explore data\n\n\n1.5 Plot data"
  },
  {
    "objectID": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "href": "In_class_Ex/In_class_Ex01/In_class_Ex01.html",
    "title": "1 Choropleth Map",
    "section": "",
    "text": "1.1 Overview\nA choropleth map is a thematic map composed of coloured polygons and is used to represent statistical data using the color mapping symbology technique.\nLearning Objectives 1. xx 2. xx\n\n\n1.2 Load packages\nknitr provides a general-purpose tool for dynamic report generation in R using Literate Programming techniques.\ntmap is a package for interactive maps.\n\npacman::p_load(knitr, tmap, tidyverse, sf)\n\n\n\n1.3 Import data\n\nodbusbusstopmpsz\n\n\n\nodbus = read_csv(\"data/origin_destination_bus_202308.csv\")\nhead(odbus, n=5)\n\n# A tibble: 5 × 7\n  YEAR_MONTH DAY_TYPE         TIME_PER_HOUR PT_TYPE ORIGIN_PT_…¹ DESTI…² TOTAL…³\n  &lt;chr&gt;      &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;   &lt;chr&gt;        &lt;chr&gt;     &lt;dbl&gt;\n1 2023-08    WEEKDAY                     16 BUS     04168        10051         7\n2 2023-08    WEEKENDS/HOLIDAY            16 BUS     04168        10051         2\n3 2023-08    WEEKENDS/HOLIDAY            14 BUS     80119        90079         3\n4 2023-08    WEEKDAY                     14 BUS     80119        90079        10\n5 2023-08    WEEKENDS/HOLIDAY            17 BUS     44069        17229         5\n# … with abbreviated variable names ¹​ORIGIN_PT_CODE, ²​DESTINATION_PT_CODE,\n#   ³​TOTAL_TRIPS\n\n\nRows: 5709512 Columns: 7\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\n\n\n\n\nbusstop &lt;- st_read(dsn = \"data\",\n                   layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/In_class_Ex/In_class_Ex01/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe output indicates that the geospatial objects are point features. There are 5161 features and 3 fields. It is in SVY21 projected coordinates system with XY dimension.\n\n\n\nmpsz = st_read(dsn=\"data\", layer=\"MPSZ-2019\") %&gt;% \n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/In_class_Ex/In_class_Ex01/data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n1.4 Explore data\n\nodbusbusstopmpsz\n\n\n\nglimpse(odbus)\n\nRows: 5,709,512\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-08\", \"2023-08\", \"2023-08\", \"2023-08\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKDAY\", \"WEEKENDS/HOLIDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 17, 7, 17, 14, 10, 10,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 44069, 20281, 2…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 17229, 20141, 2…\n$ TOTAL_TRIPS         &lt;dbl&gt; 7, 2, 3, 10, 5, 4, 3, 22, 3, 3, 7, 1, 3, 1, 3, 1, …\n\n\n\n\n\nglimpse(busstop)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\n\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n\n\n\n\n\n\n\n1.5 Extract data\n\norigin7_9 &lt;- odbus %&gt;%\n  filter(DAY_TYPE == \"WEEKDAY\") %&gt;%\n  filter(TIME_PER_HOUR &gt;= 7 &\n           TIME_PER_HOUR &lt;= 9) %&gt;%\n  group_by(ORIGIN_PT_CODE) %&gt;%\n  summarise(TRIPS = sum(TOTAL_TRIPS))\n\n\nkable(head(origin7_9))\n\n\n\n\nORIGIN_PT_CODE\nTRIPS\n\n\n\n\n01012\n1617\n\n\n01013\n813\n\n\n01019\n1620\n\n\n01029\n2383\n\n\n01039\n2727\n\n\n01059\n1415\n\n\n\n\n\n\nwrite_rds(origin7_9, \"data/rds/origin7_9.rds\")\n\n\norigin7_9 &lt;- read_rds(\"data/rds/origin7_9.rds\")\n\n\n\n1.6 Combine data\n\nbusstop_mpsz &lt;- st_intersection(busstop, mpsz) %&gt;%\n  select(BUS_STOP_N, SUBZONE_C) %&gt;%\n  st_drop_geometry()\n\n\nwrite_rds(busstop_mpsz, \"data/rds/busstop_mpsz.csv\")\n\n\norigin_data &lt;- left_join(origin7_9 , busstop_mpsz,\n            by = c(\"ORIGIN_PT_CODE\" = \"BUS_STOP_N\")) %&gt;%\n  rename(ORIGIN_BS = ORIGIN_PT_CODE,\n         ORIGIN_SZ = SUBZONE_C)\n\n\nduplicate &lt;- origin_data %&gt;%\n  group_by_all() %&gt;%\n  filter(n()&gt;1) %&gt;%\n  ungroup()\n\n\norigin_data &lt;- unique(origin_data)\n\n\nmpsz_origtrip &lt;- left_join(mpsz, \n                           origin_data,\n                           by = c(\"SUBZONE_C\" = \"ORIGIN_SZ\"))\n\n\n\n1.7 Choropleth Visualisation\n\ntm_shape(mpsz_origtrip)+\n  tm_fill(\"TRIPS\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Passenger trips\") +\n  tm_layout(main.title = \"Passenger trips generated at planning sub-zone level\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "xx"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "",
    "text": "Dynamic Patterns of Public Transport Usage: A Geospatial Analysis of Bus Stop Passenger Volume in Urban Environments\n\n\n1.1 Overview\nIn the intricate mosaic of urban transportation, bus stops serve as pivotal nodes that capture the pulse of city life through the ebb and flow of passenger trips. The study of passenger trip generation, particularly during peak hours, becomes essential for enhancing service efficiency, planning urban infrastructure, and improving the overall commuter experience. This geospatial analysis is anchored in the bustling landscape of a metropolitan area, where data on bus stops, resident population distribution, urban development plans (master plan sub-zones), and passenger volume intertwine to paint a comprehensive picture of transit dynamics.\nThis analysis aims to dissect the rhythms of urban mobility with the following objectives:\n\nGeovisualization and Analysis\n\nCompute the passenger trips generated by origin at the hexagon level,\nDisplay the geographical distribution of the passenger trips by using appropriate geovisualisation methods,\nDescribe the spatial patterns revealed by the geovisualisation (not more than 200 words per visual).\n\nLocal Indicators of Spatial Association (LISA) Analysis\n\nCompute LISA of the passengers trips generate by origin at hexagon level. Display the LISA maps of the passengers trips generate by origin at hexagon level. The maps should only display the significant (i.e. p-value &lt; 0.05) With reference to the analysis results, draw statistical conclusions (not more than 200 words per visual).\n\nEmerging Hot Spot Analysis(EHSA) With reference to the passenger trips by origin at the hexagon level for the four time intervals given above:\n\nPerform Mann-Kendall Test by using the spatio-temporal local Gi* values,\nPrepared EHSA maps of the Gi* values of the passenger trips by origin at the hexagon level. The maps should only display the significant (i.e. p-value &lt; 0.05). With reference to the EHSA maps and data visualisation prepared, describe the spatial patterns reveled. (not more than 250 words per cluster).\n\n\n\n\n1.2 Load packages\nsf dplyr mapview tmap\n\npacman::p_load(knitr, mapview, spdep, tmap, tidyverse, sf)\n\n\n\n1.3 Import data\n\nBus StopsPopulationPassenger VolumeSubzone\n\n\nbusstops contains the detailed information for all bus stops currently being serviced by buses, including bus stop code, road name, description, location coordinates. Source: LTA DataMall (Postman URL)\n\nbusstops &lt;- st_read(dsn = \"data/BusStopLocation_Jul2023\", layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `BusStop' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/Take_home_Ex/Take_home_Ex01/data/BusStopLocation_Jul2023' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5161 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48284.56 ymax: 52983.82\nProjected CRS: SVY21\n\n\nThe output indicates that the geospatial objects are point features. There are 5161 features and 3 fields. It is in SVY21 projected coordinates system with XY dimension.\n\n\nGeospatial statistics are published by the Singapore Department of Statistics. They are available from the Population Trends, Census of Population and General Household Survey reports. Singapore Residents by Planning Area/Subzone, Age Group, Sex and Floor Area of Residence, June 2011 onwards\nPA - Planning Area SZ - Subzone AG - Age Group Sex - Sex FA - Floor Area of Residence Pop - Resident Count Time - Time / Period\n\nFor June 2011 to 2019, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2014.\nFor June 2020, Planning Areas refer to areas demarcated in the Urban Redevelopment Authority’s Master Plan 2019.\nData from 2003 onwards exclude residents who have been away from Singapore for a continuous period of 12 months or longer as at the reference period.\nThe figures have been rounded to the nearest 10.\nThe data may not add up due to rounding.\n\nSource: Department of Statistics (Link)\n\npopdata &lt;- read_csv(\"data/respopagesexfa2011to2020/respopagesexfa2011to2020.csv\")\n\n\n\nodbus contains the number of trips by weekdays and weekends from origin to destination bus stops. It indicates passenger volume for October 2023. Source: LTA DataMall (Postman URL)\n\nodbus = read_csv(\"data/origin_destination_bus_202310.csv\")\n\nThe output does not indicate any geospatial objects. There are 5,694,297 records and 7 fields.\n\n\nMaster Plan 2019 Subzone Boundary\nThe Master Plan is a forward looking guiding plan for Singapore’s development in the medium term over the next 10 to 15 years published in 2019. Note this mpsz differs from that in previous chapter, Data Wrangling.\nhexagon is a hexagon layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.) should be used to replace the relative coarse and irregular Master Plan 2019 Planning Sub-zone GIS data set of URA.\nSource: URA (Download here)\n\nmpsz = st_read(dsn=\"data/MPSZ-2019\", layer=\"MPSZ-2019\") %&gt;% \n  st_transform(crs=3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/chockwankee/Documents/chockwk/ISSS624_Geospatial_Analytics/Take_home_Ex/Take_home_Ex01/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThe output indicates that the geospatial objects are multipolygon features. There are 332 features and 6 fields. It is in WGS84 projected coordinates system with XY dimension.\n\n# Assuming mpsz is your sf object\n#mpsz &lt;- st_read(dsn=\"data/MP19_SUBZONE\", layer=\"MP19_SUBZONE_NO_SEA\")\n\n# Ensure that 'geometry' is the active geometry column\n#mpsz &lt;- st_set_geometry(mpsz, \"geometry\")\n\n# Check for invalid geometries and apply st_make_valid if needed\n#mpsz$geometry_is_valid &lt;- st_is_valid(mpsz$geometry)\n#mpsz &lt;- mpsz %&gt;%\n#  mutate(geometry = ifelse(!geometry_is_valid, st_make_valid(geometry), geometry))\n\n# Now, remove the Z dimension explicitly if it exists\n#mpsz &lt;- st_zm(mpsz, drop = TRUE, what = \"Z\")\n\n# View the data structure to confirm changes\n#print(mpsz1)\n\n\n\n\n\n\n\nWarning\n\n\n\nWarning: GDAL Message 1: Sub-geometry 0 has coordinate dimension 2, but container has 3\n\n\nThe warning message indicate that a discrepancy in the dimensionality of the geometries in mpsz Shapefile. Some of the sub-geometries have 2D coordinates (X and Y), while the overall container expects 3D coordinates (X, Y, and Z). The st_zm(what = \"Z\") function drops the Z dimension from the geometries, which eliminate the warnings about coordinate dimensions. We are not performing 3D analysis, this approach should work fine for most applications.\n\n\n\n\n\n1.4 Create Spatial Grids\nSpatial grids are commonly used in spatial analysis to divide the study area into equal size, regular polygons that tessellate the area of interest. On the selection of grid, regular geographic units, such as square grid or fishnets, rarely reflect real world situations. Hexagons are compact shape and can overcome oddly-shaped geographical units.\nStep 1: Create a hexgonal grid\n\n# Create hexagonal grid (250m from center to edges)\narea_hexagon_grid = st_make_grid(busstops, cellsize = 500, what = \"polygons\", square = FALSE)\narea_hexagon_grid\n\nGeometry set for 5580 features \nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3470.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nStep 2: Add Grid ID\n\nhexagon_grid_sf = st_sf(area_hexagon_grid) %&gt;% \n  mutate(grid_id = 1:length(lengths(area_hexagon_grid)))\nhexagon_grid_sf\n\nSimple feature collection with 5580 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3470.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                area_hexagon_grid grid_id\n1  POLYGON ((3720.122 26626.44...       1\n2  POLYGON ((3720.122 27492.46...       2\n3  POLYGON ((3720.122 28358.49...       3\n4  POLYGON ((3720.122 29224.51...       4\n5  POLYGON ((3720.122 30090.54...       5\n6  POLYGON ((3720.122 30956.57...       6\n7  POLYGON ((3720.122 31822.59...       7\n8  POLYGON ((3720.122 32688.62...       8\n9  POLYGON ((3720.122 33554.64...       9\n10 POLYGON ((3720.122 34420.67...      10\n\n\nStep 3: Count the number of bus stops in each grid and remove grids without any value.\n\nhexagon_grid_sf$grid_id = lengths(st_intersects(hexagon_grid_sf, busstops))\nhexagon_count = filter(hexagon_grid_sf, grid_id&gt;0)\n\nStep 4: Set tmap to view mode for interactive plotting.\n\ntmap_mode(\"view\")\nhexagon = tm_shape(hexagon_count)+\n  tm_fill(\n    col = \"grid_id\",\n    palette = \"Reds\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0)\n    )\n  )+\n  tm_borders(col = \"grey40\", lwd = 0.7)\nhexagon\n\n\n\n\n\n\n\n\n1.5 Explore data\n\nBus StopsPopulationPassenger VolumeSubzone\n\n\n\nglimpse(busstops)\n\nRows: 5,161\nColumns: 4\n$ BUS_STOP_N &lt;chr&gt; \"22069\", \"32071\", \"44331\", \"96081\", \"11561\", \"66191\", \"2338…\n$ BUS_ROOF_N &lt;chr&gt; \"B06\", \"B23\", \"B01\", \"B05\", \"B05\", \"B03\", \"B02A\", \"B02\", \"B…\n$ LOC_DESC   &lt;chr&gt; \"OPP CEVA LOGISTICS\", \"AFT TRACK 13\", \"BLK 239\", \"GRACE IND…\n$ geometry   &lt;POINT [m]&gt; POINT (13576.31 32883.65), POINT (13228.59 44206.38),…\n\n\n\n\n\nglimpse(popdata)\n\nRows: 738,492\nColumns: 7\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo K…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Centre\", \"Ang Mo Kio T…\n$ AG   &lt;chr&gt; \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  &lt;chr&gt; \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", \"Females\", …\n$ FA   &lt;chr&gt; \"&lt;= 60\", \"&gt;60 to 80\", \"&gt;80 to 100\", \"&gt;100 to 120\", \"&gt;120\", \"Not A…\n$ Pop  &lt;dbl&gt; 0, 10, 30, 80, 20, 0, 0, 10, 40, 90, 10, 0, 0, 10, 30, 110, 30, 0…\n$ Time &lt;dbl&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011,…\n\n\n\n\n\nodbus$ORIGIN_PT_CODE &lt;- as.factor(odbus$ORIGIN_PT_CODE)\nodbus$DESTINATION_PT_CODE &lt;- as.factor(odbus$DESTINATION_PT_CODE)\nglimpse(odbus)\n\nRows: 5,694,297\nColumns: 7\n$ YEAR_MONTH          &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ DAY_TYPE            &lt;chr&gt; \"WEEKENDS/HOLIDAY\", \"WEEKDAY\", \"WEEKENDS/HOLIDAY\",…\n$ TIME_PER_HOUR       &lt;dbl&gt; 16, 16, 14, 14, 17, 17, 17, 7, 14, 14, 10, 20, 20,…\n$ PT_TYPE             &lt;chr&gt; \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"BUS\", \"…\n$ ORIGIN_PT_CODE      &lt;fct&gt; 04168, 04168, 80119, 80119, 44069, 20281, 20281, 1…\n$ DESTINATION_PT_CODE &lt;fct&gt; 10051, 10051, 90079, 90079, 17229, 20141, 20141, 1…\n$ TOTAL_TRIPS         &lt;dbl&gt; 3, 5, 3, 5, 4, 1, 24, 2, 1, 7, 3, 2, 5, 1, 1, 1, 1…\n\n\n\n\n\nglimpse(mpsz)\n\nRows: 332\nColumns: 7\n$ SUBZONE_N  &lt;chr&gt; \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  &lt;chr&gt; \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C &lt;chr&gt; \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((33222.98 29..., MULTIPOLYGON (…\n\n\n\n\n\n\n\n1.5 Plot data\n\nBus StopsPopulationPassenger VolumeSubzone\n\n\n\nlocation = mapview(busstops, cex = 3, alpha = 0.5, popup = NULL)\nlocation\n\n\n\n\n\n\n# Filter hexagons that contain more than 8 bus stops\nhexagon_red = filter(hexagon_grid_sf, grid_id&gt;8)\n\ntmap_mode(\"view\")\nredhex = tm_shape(hexagon_red)+\n  tm_fill(\n    col = \"grid_id\",\n    palette = \"Reds\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0)\n    )\n  )+\n  tm_borders(col = \"grey40\", lwd = 0.7)\nredhex\n\n\n\n\n\n\nSembawang MRT (9 bus stops)\n\n\n\n\n\nPasir Ris (11 bus stops)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.6 Geovisualisation and Analysis\n\n\n1.6 Local Indicators of Spatial Association (LISA) Analysis\n\n\n1.7 Emerging Hot Spot Analysis (EHSA)\n\n\nweekday evening peak passenger trips by origin; hexagons dont not have shared boundary; isolated with no neighbours but a hotspot."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/data.html",
    "href": "Take_home_Ex/Take_home_Ex01/data.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "import pandas as pd\nimport json\n\n\n# Load JSON data from file\nwith open(\"BusStops202310.json\", \"r\") as file:\n    data = json.load(file)\n\n# Extract bus stop information from the 'value' key\nbus_stops = data['value']\n\n# Create a DataFrame with the specified columns\ndf_bus_stops = pd.DataFrame(bus_stops, columns=[\"BusStopCode\", \"RoadName\", \"Description\", \"Latitude\", \"Longitude\"])\n\n# Save the DataFrame to a CSV file\ndf_bus_stops.to_csv('bus_stops.csv', index=False)\n\nFileNotFoundError: [Errno 2] No such file or directory: 'BusStops202310.json'"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/data/MP19_SUBZONE/MP19_SUBZONE_NO_SEA.html",
    "href": "Take_home_Ex/Take_home_Ex01/data/MP19_SUBZONE/MP19_SUBZONE_NO_SEA.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "href": "Take_home_Ex/Take_home_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "title": "Geospatial Analytics",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-the-bus-stop-density",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-the-bus-stop-density",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "1.6.1 Compute the bus stop density",
    "text": "1.6.1 Compute the bus stop density\n\n# Filter hexagons that contain more than 8 bus stops\nhexagon_red = filter(hexagon_grid_sf, grid_id&gt;8)\n\ntmap_mode(\"view\")\nredhex = tm_shape(hexagon_red)+\n  tm_fill(\n    col = \"grid_id\",\n    palette = \"Reds\",\n    style = \"cont\",\n    title = \"Number of Bus Stops\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0)\n    )\n  )+\n  tm_borders(col = \"grey40\", lwd = 0.7)\nredhex\n\n\n\n\n\n\nSembawang MRT (9 bus stops)\n\n\n\n\n\nPasir Ris (11 bus stops)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-the-passenger-trips-generated-by-origin",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-the-passenger-trips-generated-by-origin",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "1.6.2 Compute the passenger trips generated by origin",
    "text": "1.6.2 Compute the passenger trips generated by origin\n\nStep 1: Classify by time interval\n\n# Function to assign peak and non-peak times\ntime_interval &lt;- function(day_type, time_per_hour) {\n  if (day_type == \"WEEKDAY\") {\n    if (time_per_hour &gt;= 6 & time_per_hour &lt;= 9) {\n      \"morning peak\"\n    } else if (time_per_hour &gt;= 17 & time_per_hour &lt;= 20) {\n      \"afternoon peak\"\n    } else {\n      \"non peak\"\n    }\n  } else if (day_type == \"WEEKENDS/HOLIDAY\") {\n    if (time_per_hour &gt;= 11 & time_per_hour &lt;= 14) {\n      \"morning peak\"\n    } else if (time_per_hour &gt;= 16 & time_per_hour &lt;= 19) {\n      \"evening peak\"\n    } else {\n      \"non peak\"\n    }\n  } else {\n    \"non peak\"\n  }\n}\n\n# Assuming 'odbus' is your data frame\nodbus$TIME &lt;- mapply(time_interval, odbus$DAY_TYPE, odbus$TIME_PER_HOUR)\n\n# Checking the first few rows of the data frame to verify the new column\nhead(odbus)\n\n# A tibble: 6 × 8\n  YEAR_MONTH DAY_TYPE         TIME_PER_H…¹ PT_TYPE ORIGI…² DESTI…³ TOTAL…⁴ TIME \n  &lt;chr&gt;      &lt;chr&gt;                   &lt;dbl&gt; &lt;chr&gt;   &lt;fct&gt;   &lt;fct&gt;     &lt;dbl&gt; &lt;chr&gt;\n1 2023-10    WEEKENDS/HOLIDAY           16 BUS     04168   10051         3 even…\n2 2023-10    WEEKDAY                    16 BUS     04168   10051         5 non …\n3 2023-10    WEEKENDS/HOLIDAY           14 BUS     80119   90079         3 morn…\n4 2023-10    WEEKDAY                    14 BUS     80119   90079         5 non …\n5 2023-10    WEEKDAY                    17 BUS     44069   17229         4 afte…\n6 2023-10    WEEKENDS/HOLIDAY           17 BUS     20281   20141         1 even…\n# … with abbreviated variable names ¹​TIME_PER_HOUR, ²​ORIGIN_PT_CODE,\n#   ³​DESTINATION_PT_CODE, ⁴​TOTAL_TRIPS\n\n\n\n\nStep 2: Join datasets\n\npassengertrips &lt;- left_join(busstops, odbus, \n                            by = c(\"BUS_STOP_N\" = \"ORIGIN_PT_CODE\"))\n\n\nDayTime\n\n\n\npassengertrips_day &lt;- passengertrips %&gt;%\n  group_by(BUS_STOP_N, BUS_ROOF_N, LOC_DESC, YEAR_MONTH, geometry) %&gt;%\n  summarise(\n    WEEKDAY_TRIPS = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_TRIPS = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\"], na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n\n\nDetermine peak or non peak\n\npassengertrips_time &lt;- passengertrips %&gt;%\n  group_by(BUS_STOP_N, BUS_ROOF_N, LOC_DESC, YEAR_MONTH, geometry) %&gt;%\n  summarise(\n    WEEKDAY_MORNING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"morning peak\"], na.rm = TRUE),\n    WEEKDAY_AFTERNOON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"afternoon peak\"], na.rm = TRUE),\n    WEEKDAY_NON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"non peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_MORNING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"morning peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_EVENING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"evening peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_NON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"non peak\"], na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\npassengertrips_time &lt;- passengertrips_time %&gt;% \n  filter(!(WEEKDAY_MORNING_PEAK == 0 \n           & WEEKDAY_AFTERNOON_PEAK == 0\n           & WEEKDAY_NON_PEAK == 0\n           & WEEKENDS_HOLIDAYS_MORNING_PEAK == 0\n           & WEEKENDS_HOLIDAYS_EVENING_PEAK == 0\n           & WEEKENDS_HOLIDAYS_NON_PEAK == 0))\n\n\n\n\n\n\nStep 3: Ensure both datasets are in the same coordinate reference system (CRS).\n\nDayTimeHexagon grid\n\n\n\nst_crs(passengertrips_day)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nst_crs(passengertrips_time)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\nst_crs(hexagon_grid_sf)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\n\n\n\nStep 4: Perform a spatial join to match trips to hexagons\n\nDayTime\n\n\n\npassengergrid_day &lt;- st_join(hexagon_grid_sf, passengertrips_day, join = st_intersects)\n\n\n# Remove rows with no trips (NA values)\npassengergrid_day &lt;- passengergrid_day %&gt;% \n  filter(!is.na(BUS_STOP_N))\nglimpse(passengergrid_day)\n\nRows: 5,161\nColumns: 8\n$ grid_id                 &lt;int&gt; 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1…\n$ BUS_STOP_N              &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25719\", \"…\n$ BUS_ROOF_N              &lt;chr&gt; \"UNK\", \"B02D\", \"NIL\", \"B03\", \"B01C\", \"NIL\", \"N…\n$ LOC_DESC                &lt;chr&gt; \"AFT TUAS STH BLVD\", \"BEF TUAS STH AVE 14\", \"Y…\n$ YEAR_MONTH              &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-10\", \"2…\n$ WEEKDAY_TRIPS           &lt;dbl&gt; 526, 468, 1055, 3420, 4584, 944, 689, 768, 644…\n$ WEEKENDS_HOLIDAYS_TRIPS &lt;dbl&gt; 105, 96, 247, 816, 1688, 379, 248, 147, 108, 3…\n$ area_hexagon_grid       &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48..., POLYGO…\n\n\n\n\n\npassengergrid_time &lt;- st_join(hexagon_grid_sf, passengertrips_time, join = st_intersects)\n\n\n# Remove rows with no trips (NA values)\npassengergrid_time &lt;- passengergrid_time %&gt;% \n  filter(!is.na(BUS_STOP_N))\nglimpse(passengergrid_time)\n\nRows: 5,029\nColumns: 12\n$ grid_id                        &lt;int&gt; 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 2, …\n$ BUS_STOP_N                     &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25…\n$ BUS_ROOF_N                     &lt;chr&gt; \"UNK\", \"B02D\", \"NIL\", \"B03\", \"B01C\", \"N…\n$ LOC_DESC                       &lt;chr&gt; \"AFT TUAS STH BLVD\", \"BEF TUAS STH AVE …\n$ YEAR_MONTH                     &lt;chr&gt; \"2023-10\", \"2023-10\", \"2023-10\", \"2023-…\n$ WEEKDAY_MORNING_PEAK           &lt;dbl&gt; 103, 52, 78, 185, 815, 301, 53, 60, 64,…\n$ WEEKDAY_AFTERNOON_PEAK         &lt;dbl&gt; 390, 114, 291, 1905, 2600, 299, 241, 36…\n$ WEEKDAY_NON_PEAK               &lt;dbl&gt; 33, 302, 686, 1330, 1169, 344, 395, 340…\n$ WEEKENDS_HOLIDAYS_MORNING_PEAK &lt;dbl&gt; 0, 26, 52, 187, 367, 88, 76, 45, 21, 39…\n$ WEEKENDS_HOLIDAYS_EVENING_PEAK &lt;dbl&gt; 56, 14, 100, 346, 533, 101, 55, 49, 53,…\n$ WEEKENDS_HOLIDAYS_NON_PEAK     &lt;dbl&gt; 49, 56, 95, 283, 788, 190, 117, 53, 34,…\n$ area_hexagon_grid              &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48...,…\n\n\n\n\n\n\n\nStep 5: Split passengers trip into weekday and weekend\n::: panel-tabset #### Day\n\n# Subset for Weekday\nweekday_trips &lt;- passengergrid_day %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(\n    weekday_trips = sum(WEEKDAY_TRIPS, na.rm = TRUE),\n  )\n\n# Subset for Weekend\nweekend_trips &lt;- passengergrid_day %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(\n    weekend_trips = sum(WEEKENDS_HOLIDAYS_TRIPS, na.rm = TRUE),\n  )\n\n\nTime\n\n# First, ensure all necessary columns are present in the dataframe\npassengergrid_clean &lt;- passengergrid_time %&gt;%\n  mutate(\n    WEEKDAY_MORNING_PEAK = ifelse(is.na(WEEKDAY_MORNING_PEAK), 0, WEEKDAY_MORNING_PEAK),\n    WEEKDAY_AFTERNOON_PEAK = ifelse(is.na(WEEKDAY_AFTERNOON_PEAK), 0, WEEKDAY_AFTERNOON_PEAK),\n    WEEKENDS_HOLIDAYS_MORNING_PEAK = ifelse(is.na(WEEKENDS_HOLIDAYS_MORNING_PEAK), 0, WEEKENDS_HOLIDAYS_MORNING_PEAK),\n    WEEKENDS_HOLIDAYS_EVENING_PEAK = ifelse(is.na(WEEKENDS_HOLIDAYS_EVENING_PEAK), 0, WEEKENDS_HOLIDAYS_EVENING_PEAK)\n  )\n\n# Function to summarise and filter bus stops with no trips\nsummarise_and_filter &lt;- function(data, column) {\n  data %&gt;%\n    group_by(BUS_STOP_N) %&gt;%\n    summarise(Total_Trips = sum({{ column }}, na.rm = TRUE)) %&gt;%\n    filter(Total_Trips &gt; 0) %&gt;%\n    ungroup()\n}\n\n# Create subsets using the function\nweekday_morning_peak &lt;- summarise_and_filter(passengergrid_clean, \n                                             WEEKDAY_MORNING_PEAK)\n\nweekday_afternoon_peak &lt;- summarise_and_filter(passengergrid_clean, \n                                               WEEKDAY_AFTERNOON_PEAK)\n\nweekend_morning_peak &lt;- summarise_and_filter(passengergrid_clean, \n                                             WEEKENDS_HOLIDAYS_MORNING_PEAK)\n\nweekend_evening_peak &lt;- summarise_and_filter(passengergrid_clean, \n                                             WEEKENDS_HOLIDAYS_EVENING_PEAK)\n\n# Check for any BUS_STOP_N that might still have issues\nproblematic_stops &lt;- passengergrid_clean %&gt;%\n  filter(is.na(BUS_STOP_N)) %&gt;%\n  pull(BUS_STOP_N) %&gt;%\n  unique()\n\n# If problematic_stops has any values, you may need to address these specifically,\n# for example by removing them from passengergrid_clean before creating the subsets\nif (length(problematic_stops) &gt; 0) {\n  passengergrid_clean &lt;- passengergrid_clean %&gt;%\n    filter(!(BUS_STOP_N %in% problematic_stops))\n}\n\n\n\n\nStep 6: Plot passenger trips traffic\n\nWeekday TripsWeekday Morning PeakWeekday afternoon_peakWeekend TripsWeekend morning peaksWeekend evening peaks\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_sf &lt;- st_as_sf(weekday_trips, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_sf$weekday_trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_sf) +\n  tm_polygons(\"weekday_trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekday Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_morning_peak_sf &lt;- st_as_sf(weekday_morning_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_morning_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_morning_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"weekday_morning_peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"weekday_morning_peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_afternoon_peak_sf &lt;- st_as_sf(weekday_afternoon_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_afternoon_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_afternoon_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekday Afternoon Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Afternoon Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekend_sf &lt;- st_as_sf(weekend_trips, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_sf$weekend_trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_sf) +\n  tm_polygons(\"weekend_trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekend_morning_peak_sf &lt;- st_as_sf(weekend_morning_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_morning_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_morning_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Morning Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Morning Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekend_evening_peak_sf &lt;- st_as_sf(weekend_evening_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_evening_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_evening_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Evening Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Evening Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-1",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-1",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Step 1",
    "text": "Step 1\nFirst, we will create hexagonal grids using st_make_grid() to cover the geometry of busstops. We also assign grid id to each hexagon using length() to calculate the length of the geometry and generate a sequence from 1 to the length of vectors in area_hexagon_grid.\n\n\nShow the code\narea_hexagon_grid = st_make_grid(busstops, cellsize = 500, what = \"polygons\", square = FALSE)\n\nhexagon_grid_sf = st_sf(area_hexagon_grid) %&gt;% \n  mutate(grid_id = 1:length(lengths(area_hexagon_grid)))\nhexagon_grid_sf\n\n\nSimple feature collection with 5580 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3470.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                area_hexagon_grid grid_id\n1  POLYGON ((3720.122 26626.44...       1\n2  POLYGON ((3720.122 27492.46...       2\n3  POLYGON ((3720.122 28358.49...       3\n4  POLYGON ((3720.122 29224.51...       4\n5  POLYGON ((3720.122 30090.54...       5\n6  POLYGON ((3720.122 30956.57...       6\n7  POLYGON ((3720.122 31822.59...       7\n8  POLYGON ((3720.122 32688.62...       8\n9  POLYGON ((3720.122 33554.64...       9\n10 POLYGON ((3720.122 34420.67...      10\n\n\nThe output indicates that the geospatial objects are polygon features. There are 5580 features and 1 fields. It is in SVY21 projected coordinates system with XY dimension, same as that in busstops dataset."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-2",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-2",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Step 2",
    "text": "Step 2\nSecond, st_intersects() combines the hexagon object hexagon_grid_sf and busstops and length() counts the number of bus stops in each grid. The grids without any bus stops will be removed by filter() to reflect the distribution in reality.\n\n\nShow the code\nhexagon_grid_sf$grid_id = lengths(st_intersects(hexagon_grid_sf, busstops))\nhexagon_count = filter(hexagon_grid_sf, grid_id &gt; 0)\nhexagon_count\n\n\nSimple feature collection with 1524 features and 1 field\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 3720.122 ymin: 26193.43 xmax: 48720.12 ymax: 53184.55\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n                area_hexagon_grid grid_id\n1  POLYGON ((3970.122 27925.48...       1\n2  POLYGON ((4220.122 28358.49...       1\n3  POLYGON ((4470.122 30523.55...       1\n4  POLYGON ((4720.122 28358.49...       1\n5  POLYGON ((4720.122 30090.54...       2\n6  POLYGON ((4720.122 30956.57...       1\n7  POLYGON ((4720.122 31822.59...       1\n8  POLYGON ((4970.122 28791.5,...       1\n9  POLYGON ((4970.122 29657.53...       1\n10 POLYGON ((4970.122 30523.55...       2\n\n\nThe output indicates that the geospatial objects retained polygon features and there are more than one polygon feature in a grid_id. The intersection of busstops and hexagon_grid_sf yields 1524 features and 1 fields, indicating only 1524 out of 5580 features contains bus stops. It is in SVY21 projected coordinates system with XY dimension."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-3",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#step-3",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Step 3",
    "text": "Step 3\nUsing tmap, the distribution of bus stops across Singapore can be visualised in the interactive map below.\n\n\nShow the code\ntmap_mode(\"view\")\nhexagon = tm_shape(hexagon_count)+\n  tm_fill(\n    col = \"grid_id\",\n    palette = \"Reds\",\n    style = \"cont\",\n    title = \"Number of Bus Stops in Singapore\",\n    id = \"grid_id\",\n    showNA = FALSE,\n    alpha = 0.6,\n    popup.format = list(\n      grid_id = list(format = \"f\", digits = 0)\n    )\n  )+\n  tm_borders(col = \"grey40\", lwd = 0.7)\nhexagon\n\n\n\n\n\n\n\nThe geospatial distribution of bus stops in Singapore, as visualized in the above map, is extensive and dispersed throughout the central region, with a notable concentration of stops with darker shades of red signifying higher concentrations. Outlying regions, along the coastal areas, show fewer bus stops as indicated by the presence of lighter-colored hexagons or even white spaces where no stops are present. This distribution pattern suggests a robust public transportation infrastructure in urban and densely populated areas, tapering off in less populated or industrial regions."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#timing-of-day",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#timing-of-day",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Timing of Day",
    "text": "Timing of Day\nDetermine peak or non peak\n\npassengertrips_time &lt;- passengertrips %&gt;%\n  group_by(BUS_STOP_N, BUS_ROOF_N, LOC_DESC, YEAR_MONTH, geometry) %&gt;%\n  summarise(\n    WEEKDAY_MORNING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"morning peak\"], na.rm = TRUE),\n    WEEKDAY_AFTERNOON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"afternoon peak\"], na.rm = TRUE),\n    WEEKDAY_NON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE == \"WEEKDAY\" & TIME == \"non peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_MORNING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"morning peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_EVENING_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"evening peak\"], na.rm = TRUE),\n    WEEKENDS_HOLIDAYS_NON_PEAK = sum(TOTAL_TRIPS[DAY_TYPE != \"WEEKDAY\" & TIME == \"non peak\"], na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\npassengertrips_time &lt;- passengertrips_time %&gt;% \n  filter(!(WEEKDAY_MORNING_PEAK == 0 \n           & WEEKDAY_AFTERNOON_PEAK == 0\n           & WEEKDAY_NON_PEAK == 0\n           & WEEKENDS_HOLIDAYS_MORNING_PEAK == 0\n           & WEEKENDS_HOLIDAYS_EVENING_PEAK == 0\n           & WEEKENDS_HOLIDAYS_NON_PEAK == 0))"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#day-of-week-3",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#day-of-week-3",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Day of Week",
    "text": "Day of Week\n\n# Subset for Weekday\nweekday_trips &lt;- passengergrid_day %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(\n    weekday_trips = sum(WEEKDAY_TRIPS, na.rm = TRUE),\n  )\n\n# Subset for Weekend\nweekend_trips &lt;- passengergrid_day %&gt;%\n  group_by(BUS_STOP_N) %&gt;%\n  summarise(\n    weekend_trips = sum(WEEKENDS_HOLIDAYS_TRIPS, na.rm = TRUE),\n  )"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#time-of-day",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#time-of-day",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Time of Day",
    "text": "Time of Day\n\n# First, ensure all necessary columns are present in the dataframe\npassengergrid_clean &lt;- passengergrid_time %&gt;%\n  mutate(\n    WEEKDAY_MORNING_PEAK = ifelse(is.na(WEEKDAY_MORNING_PEAK), 0, WEEKDAY_MORNING_PEAK),\n    WEEKDAY_AFTERNOON_PEAK = ifelse(is.na(WEEKDAY_AFTERNOON_PEAK), 0, WEEKDAY_AFTERNOON_PEAK),\n    WEEKENDS_HOLIDAYS_MORNING_PEAK = ifelse(is.na(WEEKENDS_HOLIDAYS_MORNING_PEAK), 0, WEEKENDS_HOLIDAYS_MORNING_PEAK),\n    WEEKENDS_HOLIDAYS_EVENING_PEAK = ifelse(is.na(WEEKENDS_HOLIDAYS_EVENING_PEAK), 0, WEEKENDS_HOLIDAYS_EVENING_PEAK)\n  )\n\n# Function to summarise and filter bus stops with no trips\nsummarise_and_filter &lt;- function(data, column) {\n  data %&gt;%\n    group_by(BUS_STOP_N) %&gt;%\n    summarise(Total_Trips = sum({{ column }}, na.rm = TRUE)) %&gt;%\n    filter(Total_Trips &gt; 0) %&gt;%\n    ungroup()\n}\n\n# Create subsets using the function\nweekday_morning_peak &lt;- summarise_and_filter(passengergrid_clean, WEEKDAY_MORNING_PEAK)\n\nweekday_afternoon_peak &lt;- summarise_and_filter(passengergrid_clean, WEEKDAY_AFTERNOON_PEAK)\n\nweekend_morning_peak &lt;- summarise_and_filter(passengergrid_clean, WEEKENDS_HOLIDAYS_MORNING_PEAK)\n\nweekend_evening_peak &lt;- summarise_and_filter(passengergrid_clean, WEEKENDS_HOLIDAYS_EVENING_PEAK)\n\n# Check for any BUS_STOP_N that might still have issues\nproblematic_stops &lt;- passengergrid_clean %&gt;%\n  filter(is.na(BUS_STOP_N)) %&gt;%\n  pull(BUS_STOP_N) %&gt;%\n  unique()\n\n# If problematic_stops has any values, you may need to address these specifically,\n# for example by removing them from passengergrid_clean before creating the subsets\nif (length(problematic_stops) &gt; 0) {\n  passengergrid_clean &lt;- passengergrid_clean %&gt;%\n    filter(!(BUS_STOP_N %in% problematic_stops))\n}\n\n\nWeekday TripsWeekday Morning PeakWeekday afternoon_peakWeekend TripsWeekend evening peaks\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_sf &lt;- st_as_sf(weekday_trips, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_sf$weekday_trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_sf) +\n  tm_polygons(\"weekday_trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekday Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_morning_peak_sf &lt;- st_as_sf(weekday_morning_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_morning_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_morning_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"weekday_morning_peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"weekday_morning_peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekday_afternoon_peak_sf &lt;- st_as_sf(weekday_afternoon_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekday_afternoon_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekday_afternoon_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekday Afternoon Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Afternoon Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekend_sf &lt;- st_as_sf(weekend_trips, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_sf$weekend_trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_sf) +\n  tm_polygons(\"weekend_trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\nWeekend morning peaks\n\n# Convert your data to an sf object if it's not one already\nweekend_morning_peak_sf &lt;- st_as_sf(weekend_morning_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_morning_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_morning_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Morning Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Morning Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)\n\n\n\n\n\n\n\n\n\n\n# Convert your data to an sf object if it's not one already\nweekend_evening_peak_sf &lt;- st_as_sf(weekend_evening_peak, coords = c(\"longitude\", \"latitude\"), crs = 4326) \n\n# Calculate breaks at intervals of 25,000\nmax_trips &lt;- max(weekend_evening_peak_sf$Total_Trips, na.rm = TRUE)\nbreaks &lt;- c(1, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\n# Print the map\ntmap_mode(\"view\")\ntm_shape(weekend_evening_peak_sf) +\n  tm_polygons(\"Total_Trips\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks,\n              title = \"Weekend Evening Peak Trips\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Evening Peak Trips by Bus Stop\", \n            main.title.position = \"center\", \n            frame = FALSE)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-lisa-of-the-passengers-trips-generate-by-origin-at-hexagon-level.",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01.html#compute-lisa-of-the-passengers-trips-generate-by-origin-at-hexagon-level.",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "1.6.1 Compute LISA of the passengers trips generate by origin at hexagon level.",
    "text": "1.6.1 Compute LISA of the passengers trips generate by origin at hexagon level.\n\nMethod 1: Computing Contiguity Spatial Weights\npoly2nb defines the spatial relationship between different regions by computing contiguity weight matrices and build a neighbours list based on regions with contiguous boundaries.\n\nDayTime\n\n\n\npassengergrid_day_total &lt;- passengergrid_day %&gt;%\n  mutate(TOTAL_TRIPS = WEEKDAY_TRIPS + WEEKENDS_HOLIDAYS_TRIPS)\n\n\nwm_q_day &lt;- poly2nb(passengergrid_day_total, queen=TRUE)\nsummary(wm_q_day)\n\nNeighbour list object:\nNumber of regions: 5161 \nNumber of nonzero links: 112788 \nPercentage nonzero weights: 0.4234432 \nAverage number of links: 21.8539 \n7 regions with no links:\n1767 2407 2884 3350 4627 5154 5222\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 \n  7  12  17  27  36  89  67 103  85  71 125 135 105 140 150 139 189 191 222 153 \n 20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39 \n186 161 244 261 220 212 200 205 196 173 117 128 135 117 114  69  62  49  34  50 \n 40  41  42  43  44  45  46  49 \n 46  52  11  25  13   6   4   8 \n12 least connected regions:\n34 251 313 1543 3507 3507.1 5129 5159 5278 5278.1 5558 5558.1 with 1 link\n8 most connected regions:\n3292 3292.1 3292.2 3292.3 3292.4 3292.5 3292.6 3292.7 with 49 links\n\n\nThe output shown is a summary of a neighbors list object using Queen contiguity weight matrix. There are 5,029 regions and approximately 42.69% of all possible neighbor pairs are neighbors with nonzero links. Each region has an average of 21.47 neighboring regions. For poorly connected regions, there are 7 regions without neighbors and 14 regions with 1 neighbour. There are 8 well-connected regions with 48 neighbours.\n\n\n\npassengergrid_time_total &lt;- passengergrid_time %&gt;% \n  mutate(TOTAL_TRIPS = WEEKDAY_MORNING_PEAK + WEEKDAY_AFTERNOON_PEAK + WEEKDAY_NON_PEAK +\n           WEEKENDS_HOLIDAYS_MORNING_PEAK + WEEKENDS_HOLIDAYS_EVENING_PEAK + WEEKENDS_HOLIDAYS_NON_PEAK)\n\n\nwm_q_time &lt;- poly2nb(passengergrid_time_total, queen=TRUE)\nsummary(wm_q_time)\n\nNeighbour list object:\nNumber of regions: 5029 \nNumber of nonzero links: 107980 \nPercentage nonzero weights: 0.426953 \nAverage number of links: 21.47147 \n7 regions with no links:\n1767 2407 2884 3350 4627 5154 5222\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19 \n  7  14  17  30  28  94  67 103  82  81 116 137 122 137 130 159 166 230 197 163 \n 20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36  37  38  39 \n157 177 257 237 209 197 216 217 181 185 127 128  93 121  97  47  62  48   9  27 \n 40  41  42  43  44  48 \n 56  47  17  19  10   8 \n14 least connected regions:\n34 251 313 1543 2135 2135.1 3507 3507.1 5129 5159 5278 5278.1 5558 5558.1 with 1 link\n8 most connected regions:\n3292 3292.1 3292.2 3292.3 3292.4 3292.5 3292.6 3292.7 with 48 links\n\n\nThe output shown is a summary of a neighbors list object. There are 5,029 regions and approximately 42.69% of all possible neighbor pairs are neighbors with nonzero links. Each region has an average of 21.47 neighboring regions. For poorly connected regions, there are 7 regions without neighbors and 14 regions with 1 neighbour. There are 8 well-connected regions with 48 neighbours.\n\n\n\n\n\nMethod 2: Computing distance based neighbours\npassengergrid is made up of polygons features, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids.\n\nlongitude &lt;- map_dbl(passengergrid_time_total$area_hexagon_grid, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(passengergrid_time_total$area_hexagon_grid, ~st_centroid(.x)[[2]])\n\n\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n     longitude latitude\n[1,]  3970.122 28214.15\n[2,]  4220.122 28647.16\n[3,]  4470.122 30812.23\n[4,]  4720.122 28647.16\n[5,]  4720.122 30379.22\n[6,]  4720.122 30379.22\n\n\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    0.0     0.0     0.0   402.8     0.0 16228.8 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 16228.8km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\nwm_d16229 &lt;- dnearneigh(coords, 0, 16229, longlat = TRUE)\nwm_d16229\n\nNeighbour list object:\nNumber of regions: 5029 \nNumber of nonzero links: 22604344 \nPercentage nonzero weights: 89.37759 \nAverage number of links: 4494.799 \n\n\n\n# Make a new list with only the first 5 elements\nwm_d16229_subset &lt;- wm_d16229[1:5]\n\n# Now use str() on this subset\nstr(wm_d16229_subset)\n\nList of 5\n $ : int [1:4468] 2 4 5 6 8 9 10 11 12 13 ...\n $ : int [1:4679] 1 3 4 5 6 7 8 9 10 11 ...\n $ : int [1:4681] 2 4 5 6 7 8 9 10 11 12 ...\n $ : int [1:4703] 1 2 3 5 6 7 8 9 10 11 ...\n $ : int [1:4562] 1 2 3 4 6 7 8 9 10 11 ...\n\n\nderive a spatial weight matrix based on Inversed Distance method.\n\n#dist_day &lt;- nbdists(wm_q_day, coords, longlat = TRUE)\n#ids_day &lt;- lapply(dist, function(x) 1/(x))\n#ids_day"
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-autocorrelation",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-autocorrelation",
    "title": "2a Spatial Weights and Application",
    "section": "Spatial Autocorrelation",
    "text": "Spatial Autocorrelation\nspdep provides functions to calculate measures of spatial autocorrelation, including global Moran’s I, Geary’s C, and Getis/Ord G statistics."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-regression-models",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-regression-models",
    "title": "2a Spatial Weights and Application",
    "section": "Spatial Regression Models",
    "text": "Spatial Regression Models\nspdep supports various types of spatial regression models, including spatial autoregressive (SAR) models, spatial error models, spatial lag models, and generalized spatial two-stage least squares (GMM-SAR) models."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-filtering",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#spatial-filtering",
    "title": "2a Spatial Weights and Application",
    "section": "Spatial Filtering",
    "text": "Spatial Filtering\nspdep has functions for spatial filtering, such as Moran eigenvector spatial filtering (MESF) and generalized Moran eigenvector spatial filtering (GMESF), which can be used for spatial smoothing and noise reduction."
  },
  {
    "objectID": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#regional-aggregation",
    "href": "Hands_on_Ex/Hands_on_Ex02/Hands_on_Ex02.html#regional-aggregation",
    "title": "2a Spatial Weights and Application",
    "section": "Regional Aggregation",
    "text": "Regional Aggregation\nsdpep allows for regional aggregation using minimum spanning tree-based methods. :::\nsf imports and handles geospatial data in R. tidyverse wrangles attribute data in R. knitr is a general-purpose tool for dynamic report generation. tmap prepare cartographic quality choropleth map.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  }
]