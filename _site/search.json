[
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#bus-stop-density-and-malls",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#bus-stop-density-and-malls",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Bus Stop Density and Malls",
    "text": "Bus Stop Density and Malls\nHigh-density bus stop areas typically indicate regions with better public transport accessibility. This makes it easier for residents and visitors to move around without personal vehicles, which can reduce traffic congestion and the environmental impact of transportation. These regions may be suburban town centres with a higher concentration of services, amenities, and potentially population.\n\n\nShow the code\nhighdensityhex &lt;- hexagon_count[hexagon_count$COUNT &gt; 8, ]\n\ntmap_mode(\"view\")\n\nhighdensity &lt;- tm_basemap(\"OneMapSG.Grey\") +\n  tm_shape(highdensityhex) +\n  tm_fill(col = \"COUNT\",\n          palette = \"Greens\",\n          title = \"Number of Bus Stops\",\n          alpha = 0.6\n          )+\n  tm_borders(col = \"grey40\", lwd = 0.7) +\n  tm_layout(\n    title = \"High-Density Bus Stops\",\n    title.size = 1\n    ) +\n  tm_shape(malls_sf) +\n  tm_dots(size = 0.01, col = \"cyan\", title = \"Malls\")+\n  tm_view(set.zoom.limits = c(11,13))\n\nhighdensity\n\n\n\n\n\n\n\nThe top two hexagons in dark green are further examined to understand these high density areas.\n\n\n\n\n\n ::: {.callout-note} ### Insight\nThe hexagons are dense residential areas. It is observed that each hexagon have no MRT stations but usually a distance away where the bus network promotes a link to the MRT station and then to the city area. The hexagons also contain a shopping mall which promotes local economic activity and community interaction."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#bus-stop-distribution",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#bus-stop-distribution",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Bus Stop Distribution",
    "text": "Bus Stop Distribution\nThe map below shows the overview of all bus stops in Singapore. Each dot represents a bus stop.\n\n\nShow the code\n# mapview(odbusstop, cex = 3, alpha = 0.5, popup = NULL, col.regions = \"darkseagreen\")"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-time-intervals",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-time-intervals",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Passenger Volume by Time Intervals",
    "text": "Passenger Volume by Time Intervals\n\n\nShow the code\nodbus$TIME_PER_HOUR &lt;- factor(odbus$TIME_PER_HOUR)\n\ntotal_trips &lt;- odbus %&gt;%\n  group_by(DAY_TYPE, TIME_PER_HOUR) %&gt;%\n  summarise(Total_Trips = sum(TOTAL_TRIPS, na.rm = TRUE)) %&gt;%\n  ungroup()\n\nmax_trips &lt;- max(total_trips$Total_Trips)\n\nweekday_plot &lt;- ggplot(data = filter(total_trips, DAY_TYPE == \"WEEKDAY\"), \n                       aes(x = TIME_PER_HOUR, y = Total_Trips, fill = as.factor(TIME_PER_HOUR))) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  labs(title = \"Weekday Trips\", x = \"Hour of Day\", y = \"Total Trips\") +\n  theme_minimal() +\n  ylim(0, max_trips) +\n  scale_fill_viridis_d(option = \"mako\", guide = FALSE) + \n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))\n\nweekend_plot &lt;- ggplot(data = filter(total_trips, DAY_TYPE == \"WEEKENDS/HOLIDAY\"), \n                       aes(x = TIME_PER_HOUR, y = Total_Trips, fill = as.factor(TIME_PER_HOUR))) +\n  geom_bar(stat = \"identity\", width = 0.9) +\n  labs(title = \"Weekend/Holiday Trips\", x = \"Hour of Day\", y = \"Total Trips\") +\n  theme_minimal() +\n  ylim(0, max_trips) +\n  scale_fill_viridis_d(option = \"mako\", guide = FALSE) +\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))\n\ngrid.arrange(weekday_plot, weekend_plot, ncol = 2)\n\n\n\n\n\n\n\n\n\n\n\nInsight\n\n\n\nOn weekdays, there is a prominent peak in trips during the morning hours (6am to 9am), followed by a decrease and then an increase during the evening hours (5pm to 8pm). This pattern is typical of commuter behavior, with high volumes of travel during morning and evening peak hours when people are generally traveling to and from work or school.\nWeekends volume shows a different pattern, with the number of trips gradually increasing as the day progresses, peaking in the mid to late afternoon, and then tapering off. This suggests a constant travel throughout the day, which could be due to leisure activities, or social events during weekends or holidays.\nIt is consistent with bus operational hours where no trips were made between 1am to 4am."
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-intervals",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-intervals",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Passenger Volume by Intervals",
    "text": "Passenger Volume by Intervals\nPlot passenger trips traffic for each time interval using tmap.\n\n\nShow the code\nhexagon_count_tmap &lt;- hexagon_count %&gt;% \n  select(INDEX, COUNT, bus_stop_codes, \n         `WEEKDAY AFTERNOON PEAK`, `WEEKDAY MORNING PEAK`, `WEEKEND HOLIDAY EVENING PEAK`, `WEEKEND HOLIDAY MORNING PEAK`)\n\nbreaks &lt;- c(0, 2500, 5000, 7500, 10000, 25000, 50000, Inf)\n\ncurrent_mode &lt;- tmap_mode(\"plot\")\n\n# Weekday Morning Peak\n\nweekday_morning_plot &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKDAY MORNING PEAK\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks) + \n  tm_scale_bar() +\n  tm_layout(main.title = \"Weekday Morning Peak\", \n            main.title.position = \"center\",\n            frame = FALSE,\n            legend.show = FALSE)\n\n# Weekday afternoon_peak\n\nweekday_afternoon_plot &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKDAY AFTERNOON PEAK\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              breaks = breaks) +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Afternoon Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\n# Weekend morning peaks\n\nweekend_morning_plot &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKEND HOLIDAY MORNING PEAK\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks) +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Morning Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.show = FALSE)\n\n# Weekend evening peaks\n\nweekend_evening_plot &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKEND HOLIDAY EVENING PEAK\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              breaks = breaks) +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Evening Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\ntmap_arrange(weekday_morning_plot, weekday_afternoon_plot, weekend_morning_plot, weekend_evening_plot)\n\n\n\n\n\nShow the code\ntmap_mode(current_mode)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-quantile",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#passenger-volume-by-quantile",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Passenger Volume by Quantile",
    "text": "Passenger Volume by Quantile\n\n\nShow the code\ncurrent_mode &lt;- tmap_mode(\"plot\")\n\n# Weekday Morning Peak\n\nweekday_morning_plot_q &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKDAY MORNING PEAK\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              style = \"quantile\") + \n  tm_scale_bar() +\n  tm_layout(main.title = \"Weekday Morning Peak\", \n            main.title.position = \"center\",\n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\n# Weekday afternoon_peak\n\nweekday_afternoon_plot_q &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKDAY AFTERNOON PEAK\", \n              palette = \"Blues\", \n              border.col = \"grey40\",\n              style = \"quantile\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekday Afternoon Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\n# Weekend morning peaks\n\nweekend_morning_plot_q &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKEND HOLIDAY MORNING PEAK\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              style = \"quantile\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Morning Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\n# Weekend evening peaks\n\nweekend_evening_plot_q &lt;- tm_shape(hexagon_count_tmap) +\n  tm_polygons(\"WEEKEND HOLIDAY EVENING PEAK\", \n              palette = \"Purples\", \n              border.col = \"grey40\",\n              style = \"quantile\") +\n  tm_scale_bar()+\n  tm_layout(main.title = \"Weekend Evening Peak\", \n            main.title.position = \"center\", \n            frame = FALSE,\n            legend.outside = TRUE,\n            legend.outside.position = \"right\",\n            legend.text.size = 0.4)\n\ntmap_arrange(weekday_morning_plot_q, weekday_afternoon_plot_q, weekend_morning_plot_q, weekend_evening_plot_q)\n\n\n\n\n\nShow the code\ntmap_mode(current_mode)"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#space-time-cube",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#space-time-cube",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Space Time Cube",
    "text": "Space Time Cube\nSpatio-temporal data often come in the form of single tables that can typically be categorized as time-wide, space-wide, or long formats. Space-wide data present each time period across each row and locational information in each column. Whereas a time-wide representation has location data down the rows and each time period is represented as a new column. In long formats, a row identifies a unique location and time observation represented by a column dedicated to time and another to locations. These flat formats are not linked to the geographies that they represent in any meaningful way. These flat files typically contain only an identifier of the location, but the spatial representation.\n\nWeekday MorningWeekday AfternoonWeekend Holiday MorningWeekend Holiday Evening\n\n\n\n\nShow the code\nweekday_morning_hex &lt;- hexagon_count %&gt;%\n  select(INDEX, COUNT, bus_stop_codes, geometry,\n         `WEEKDAY 6`, `WEEKDAY 7`, `WEEKDAY 8`, `WEEKDAY 9`)\nglimpse(weekday_morning_hex)\n\n\nRows: 1,524\nColumns: 8\n$ INDEX          &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 160, 161, 163, 190…\n$ COUNT          &lt;int&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1…\n$ bus_stop_codes &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25719, 26389\", \"26…\n$ geometry       &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48..., POLYGON ((4220.…\n$ `WEEKDAY 6`    &lt;dbl&gt; 0, 0, 23, 44, 563, 7, 13, 2, 94, 323, 193, 11, 34, 678,…\n$ `WEEKDAY 7`    &lt;dbl&gt; 74, 6, 24, 63, 285, 14, 20, 21, 112, 472, 176, 44, 34, …\n$ `WEEKDAY 8`    &lt;dbl&gt; 19, 29, 26, 43, 201, 22, 17, 31, 33, 140, 32, 88, 177, …\n$ `WEEKDAY 9`    &lt;dbl&gt; 10, 17, 5, 35, 67, 10, 10, 10, 12, 99, 7, 9, 12, 290, 7…\n\n\n\n\nShow the code\nweekday_morning_pivot &lt;- st_join(hexagon_grid_sf, weekday_morning_hex, join = st_within)\n\nweekday_morning_pivot &lt;- weekday_morning_pivot %&gt;%\n  rename(INDEX = INDEX.x) %&gt;% \n  rename_with(~gsub(\"WEEKDAY \", \"\", .), matches(\"^WEEKDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`6`, `7`, `8`, `9`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(INDEX, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n\n\nweekday_morning_cube &lt;- spacetime(weekday_morning_pivot, hexagon_grid_sf,\n                                  .loc_col = \"INDEX\", .time_col = \"TIME_PER_HOUR\")\nglimpse(weekday_morning_cube)\n\nRows: 22,320\nColumns: 3\n$ INDEX         &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,…\n$ TIME_PER_HOUR &lt;int&gt; 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8,…\n$ TRIPS         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nis_spacetime_cube(weekday_morning_cube)\n\n[1] TRUE\n\n\n\n\n\n\nShow the code\nweekday_afternoon_hex &lt;- hexagon_count %&gt;%\n  select(INDEX, COUNT, bus_stop_codes, geometry,\n         `WEEKDAY 17`, `WEEKDAY 18`, `WEEKDAY 19`, `WEEKDAY 20`)\nglimpse(weekday_afternoon_hex)\n\n\nRows: 1,524\nColumns: 8\n$ INDEX          &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 160, 161, 163, 190…\n$ COUNT          &lt;int&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 1, 1…\n$ bus_stop_codes &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25719, 26389\", \"26…\n$ geometry       &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48..., POLYGON ((4220.…\n$ `WEEKDAY 17`   &lt;dbl&gt; 122, 28, 159, 709, 1187, 139, 195, 134, 46, 720, 43, 18…\n$ `WEEKDAY 18`   &lt;dbl&gt; 224, 31, 62, 552, 739, 51, 137, 95, 112, 727, 32, 117, …\n$ `WEEKDAY 19`   &lt;dbl&gt; 38, 30, 42, 462, 341, 21, 12, 30, 87, 548, 47, 207, 110…\n$ `WEEKDAY 20`   &lt;dbl&gt; 6, 25, 28, 182, 632, 30, 24, 37, 52, 477, 31, 73, 180, …\n\n\n\n\nShow the code\nweekday_afternoon_pivot &lt;- st_join(hexagon_grid_sf, weekday_afternoon_hex, join = st_within)\n\nweekday_afternoon_pivot &lt;- weekday_afternoon_pivot %&gt;%\n  rename(INDEX = INDEX.x) %&gt;% \n  rename_with(~gsub(\"WEEKDAY \", \"\", .), matches(\"^WEEKDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`17`, `18`, `19`, `20`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(INDEX, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n\n\nweekday_afternoon_cube &lt;- spacetime(weekday_afternoon_pivot, hexagon_grid_sf,\n                                  .loc_col = \"INDEX\", .time_col = \"TIME_PER_HOUR\")\nglimpse(weekday_afternoon_cube)\n\nRows: 22,320\nColumns: 3\n$ INDEX         &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,…\n$ TIME_PER_HOUR &lt;int&gt; 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, 19, 20, 17, 18, …\n$ TRIPS         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nis_spacetime_cube(weekday_afternoon_cube)\n\n[1] TRUE\n\n\n\n\n\n\nShow the code\nweekend_morning_hex &lt;- hexagon_count %&gt;%\n  select(INDEX, COUNT, bus_stop_codes, geometry,\n         `WEEKENDS/HOLIDAY 11`, `WEEKENDS/HOLIDAY 12`, `WEEKENDS/HOLIDAY 13`, `WEEKENDS/HOLIDAY 14`)\nglimpse(weekend_morning_hex)\n\n\nRows: 1,524\nColumns: 8\n$ INDEX                 &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 160, 161, 1…\n$ COUNT                 &lt;int&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, …\n$ bus_stop_codes        &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25719, 2638…\n$ geometry              &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48..., POLYGON …\n$ `WEEKENDS/HOLIDAY 11` &lt;dbl&gt; 0, 12, 14, 61, 114, 17, 11, 8, 18, 196, 11, 11, …\n$ `WEEKENDS/HOLIDAY 12` &lt;dbl&gt; 0, 2, 19, 43, 141, 29, 18, 8, 12, 199, 11, 14, 1…\n$ `WEEKENDS/HOLIDAY 13` &lt;dbl&gt; 0, 5, 8, 31, 111, 10, 7, 2, 2, 152, 5, 11, 10, 3…\n$ `WEEKENDS/HOLIDAY 14` &lt;dbl&gt; 0, 7, 11, 52, 89, 20, 9, 3, 7, 144, 4, 32, 14, 2…\n\n\n\n\nShow the code\nweekend_morning_pivot &lt;- st_join(hexagon_grid_sf, weekend_morning_hex, join = st_within)\n\nweekend_morning_pivot &lt;- weekend_morning_pivot %&gt;%\n  rename(INDEX = INDEX.x) %&gt;% \n  rename_with(~gsub(\"WEEKENDS/HOLIDAY \", \"\", .), matches(\"^WEEKENDS/HOLIDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`11`, `12`, `13`, `14`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(INDEX, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n\n\nweekend_morning_cube &lt;- spacetime(weekend_morning_pivot, hexagon_grid_sf,\n                                  .loc_col = \"INDEX\", .time_col = \"TIME_PER_HOUR\")\nglimpse(weekend_morning_cube)\n\nRows: 22,320\nColumns: 3\n$ INDEX         &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,…\n$ TIME_PER_HOUR &lt;int&gt; 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, 13, 14, 11, 12, …\n$ TRIPS         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nis_spacetime_cube(weekend_morning_cube)\n\n[1] TRUE\n\n\n\n\n\n\nShow the code\nweekend_evening_hex &lt;- hexagon_count %&gt;%\n  select(INDEX, COUNT, bus_stop_codes, geometry,\n         `WEEKENDS/HOLIDAY 16`, `WEEKENDS/HOLIDAY 17`, `WEEKENDS/HOLIDAY 18`, `WEEKENDS/HOLIDAY 19`)\nglimpse(weekend_morning_hex)\n\n\nRows: 1,524\nColumns: 8\n$ INDEX                 &lt;int&gt; 34, 65, 99, 127, 129, 130, 131, 159, 160, 161, 1…\n$ COUNT                 &lt;int&gt; 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 1, 2, 2, 1, …\n$ bus_stop_codes        &lt;chr&gt; \"25059\", \"25751\", \"26379\", \"25761\", \"25719, 2638…\n$ geometry              &lt;POLYGON [m]&gt; POLYGON ((3970.122 27925.48..., POLYGON …\n$ `WEEKENDS/HOLIDAY 11` &lt;dbl&gt; 0, 12, 14, 61, 114, 17, 11, 8, 18, 196, 11, 11, …\n$ `WEEKENDS/HOLIDAY 12` &lt;dbl&gt; 0, 2, 19, 43, 141, 29, 18, 8, 12, 199, 11, 14, 1…\n$ `WEEKENDS/HOLIDAY 13` &lt;dbl&gt; 0, 5, 8, 31, 111, 10, 7, 2, 2, 152, 5, 11, 10, 3…\n$ `WEEKENDS/HOLIDAY 14` &lt;dbl&gt; 0, 7, 11, 52, 89, 20, 9, 3, 7, 144, 4, 32, 14, 2…\n\n\n\n\nShow the code\nweekend_evening_pivot &lt;- st_join(hexagon_grid_sf, weekend_evening_hex, join = st_within)\n\nweekend_evening_pivot &lt;- weekend_evening_pivot %&gt;%\n  rename(INDEX = INDEX.x) %&gt;% \n  rename_with(~gsub(\"WEEKENDS/HOLIDAY \", \"\", .), matches(\"^WEEKENDS/HOLIDAY \\\\d+$\")) %&gt;%\n  pivot_longer(cols = c(`16`, `17`, `18`, `19`), \n               names_to = \"TIME_PER_HOUR\", values_to = \"TRIPS\",\n               names_transform = as.integer, values_transform = as.integer) %&gt;%\n  mutate(across(where(is.integer), ~ifelse(is.na(.), 0, .))) %&gt;%\n  select(INDEX, TIME_PER_HOUR, TRIPS) %&gt;%\n  st_set_geometry(NULL)\n\n\n\nweekend_evening_cube &lt;- spacetime(weekend_evening_pivot, hexagon_grid_sf,\n                                  .loc_col = \"INDEX\", .time_col = \"TIME_PER_HOUR\")\nglimpse(weekend_evening_cube)\n\nRows: 22,320\nColumns: 3\n$ INDEX         &lt;int&gt; 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5,…\n$ TIME_PER_HOUR &lt;int&gt; 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, 18, 19, 16, 17, …\n$ TRIPS         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…\n\n\n\nis_spacetime_cube(weekend_evening_cube)\n\n[1] TRUE"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#compute-contiguity-spatial-weights",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#compute-contiguity-spatial-weights",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Compute Contiguity Spatial Weights",
    "text": "Compute Contiguity Spatial Weights\nactivate() of dplyr activates the geometry context mutate() of dplyr creates two new columns nb and wt Then we will activate the data context again and copy over the nb and wt columns to each time-slice using set_nbs() and set_wts() row order is very important so do not rearrange the observations after using set_nbs() or set_wts(). this dataset now has neighbors and weights for each time-slice.\nWe can use these new columns to manually calculate the local Gi* for each location. We can do this by grouping by Year and using local_gstar_perm() of sfdep package. After which, we use unnest() to unnest gi_star column of the newly created gi_starts data.frame.\n\nWeekday MorningWeekday AfternoonWeekend MorningWeekend Evening\n\n\n\n\nShow the code\nweekday_morning_nb &lt;- weekday_morning_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(weekday_morning_nb)\n\n\n# A tibble: 6 × 5\n  INDEX TIME_PER_HOUR TRIPS nb        wt       \n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1     1             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n2     2             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n3     3             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n4     4             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n5     5             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n6     6             6     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n\n\n\n\nShow the code\ngi_weekday_morning &lt;- weekday_morning_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\nhead(gi_weekday_morning, n=5)\n\n\n# A tibble: 5 × 13\n# Groups:   TIME_PER_HOUR [1]\n  INDEX TIME_PER_HOUR TRIPS nb     wt     gi_star     e_gi  var_gi p_value p_sim\n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     1             6     0 &lt;int&gt;  &lt;dbl&gt;   -0.624  1.04e-4 5.26e-8  -0.456 0.649\n2     2             6     0 &lt;int&gt;  &lt;dbl&gt;   -0.624  1.08e-4 6.91e-8  -0.409 0.682\n3     3             6     0 &lt;int&gt;  &lt;dbl&gt;   -0.624  9.58e-5 3.47e-8  -0.514 0.607\n4     4             6     0 &lt;int&gt;  &lt;dbl&gt;   -0.624  1.16e-4 8.71e-8  -0.395 0.693\n5     5             6     0 &lt;int&gt;  &lt;dbl&gt;   -0.624  9.49e-5 3.29e-8  -0.523 0.601\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;\n\n\n\n\nShow the code\nggplot(data = gi_weekday_morning,\n       aes(x = TIME_PER_HOUR, y = gi_star))+\n  geom_line()+\n  theme_light()+\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))\n\n\n\n\n\n\n\n\n\nShow the code\nweekday_afternoon_nb &lt;- weekday_afternoon_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(weekday_afternoon_nb)\n\n\n# A tibble: 6 × 5\n  INDEX TIME_PER_HOUR TRIPS nb        wt       \n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1     1            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n2     2            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n3     3            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n4     4            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n5     5            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n6     6            17     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n\n\n\n\nShow the code\ngi_weekday_afternoon &lt;- weekday_afternoon_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\nhead(gi_weekday_afternoon, n=5)\n\n\n# A tibble: 5 × 13\n# Groups:   TIME_PER_HOUR [1]\n  INDEX TIME_PER_HOUR TRIPS nb     wt     gi_star     e_gi  var_gi p_value p_sim\n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     1            17     0 &lt;int&gt;  &lt;dbl&gt;   -0.597 0.000115 7.17e-8  -0.428 0.668\n2     2            17     0 &lt;int&gt;  &lt;dbl&gt;   -0.585 0.000100 3.54e-8  -0.516 0.606\n3     3            17     0 &lt;int&gt;  &lt;dbl&gt;   -0.582 0.000114 5.27e-8  -0.477 0.634\n4     4            17     0 &lt;int&gt;  &lt;dbl&gt;   -0.597 0.000115 6.46e-8  -0.451 0.652\n5     5            17     0 &lt;int&gt;  &lt;dbl&gt;   -0.597 0.000127 7.85e-8  -0.452 0.652\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;\n\n\n\n\nShow the code\nggplot(data = gi_weekday_afternoon,\n       aes(x = TIME_PER_HOUR, y = gi_star))+\n  geom_line()+\n  theme_light()+\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))\n\n\n\n\n\n\n\n\n\nShow the code\nweekend_morning_nb &lt;- weekend_morning_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(weekend_morning_nb)\n\n\n# A tibble: 6 × 5\n  INDEX TIME_PER_HOUR TRIPS nb        wt       \n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1     1            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n2     2            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n3     3            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n4     4            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n5     5            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n6     6            11     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n\n\n\n\nShow the code\ngi_weekend_morning &lt;- weekend_morning_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\nhead(gi_weekend_morning, n=5)\n\n\n# A tibble: 5 × 13\n# Groups:   TIME_PER_HOUR [1]\n  INDEX TIME_PER_HOUR TRIPS nb     wt     gi_star     e_gi  var_gi p_value p_sim\n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     1            11     0 &lt;int&gt;  &lt;dbl&gt;   -0.657  1.03e-4 3.64e-8  -0.542 0.588\n2     2            11     0 &lt;int&gt;  &lt;dbl&gt;   -0.657  1.05e-4 3.69e-8  -0.546 0.585\n3     3            11     0 &lt;int&gt;  &lt;dbl&gt;   -0.653  9.74e-5 4.41e-8  -0.458 0.647\n4     4            11     0 &lt;int&gt;  &lt;dbl&gt;   -0.657  1.07e-4 4.37e-8  -0.511 0.609\n5     5            11     0 &lt;int&gt;  &lt;dbl&gt;   -0.657  9.60e-5 3.56e-8  -0.508 0.611\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;\n\n\n\n\nShow the code\nggplot(data = gi_weekend_morning,\n       aes(x = TIME_PER_HOUR, y = gi_star))+\n  geom_line()+\n  theme_light()+\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))\n\n\n\n\n\n\n\n\n\nShow the code\nweekend_evening_nb &lt;- weekend_evening_cube %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n  set_nbs(\"nb\") %&gt;%\n  set_wts(\"wt\")\n\nhead(weekend_evening_nb)\n\n\n# A tibble: 6 × 5\n  INDEX TIME_PER_HOUR TRIPS nb        wt       \n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt;    &lt;list&gt;   \n1     1            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n2     2            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n3     3            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n4     4            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n5     5            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n6     6            16     0 &lt;int [4]&gt; &lt;dbl [4]&gt;\n\n\n\n\nShow the code\ngi_weekend_evening &lt;- weekend_evening_nb %&gt;%\n  group_by(TIME_PER_HOUR) %&gt;%\n  mutate(gi_star = local_gstar_perm(TRIPS, nb, wt)) %&gt;%\n  tidyr::unnest(gi_star)\n\nhead(gi_weekend_evening, n=5)\n\n\n# A tibble: 5 × 13\n# Groups:   TIME_PER_HOUR [1]\n  INDEX TIME_PER_HOUR TRIPS nb     wt     gi_star     e_gi  var_gi p_value p_sim\n  &lt;int&gt;         &lt;int&gt; &lt;dbl&gt; &lt;list&gt; &lt;list&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;\n1     1            16     0 &lt;int&gt;  &lt;dbl&gt;   -0.542  1.10e-4 5.95e-8  -0.450 0.653\n2     2            16     0 &lt;int&gt;  &lt;dbl&gt;   -0.541  1.00e-4 7.51e-8  -0.364 0.716\n3     3            16     0 &lt;int&gt;  &lt;dbl&gt;   -0.539  1.19e-4 1.17e-7  -0.344 0.731\n4     4            16     0 &lt;int&gt;  &lt;dbl&gt;   -0.542  1.10e-4 5.26e-8  -0.481 0.630\n5     5            16     0 &lt;int&gt;  &lt;dbl&gt;   -0.542  9.78e-5 8.93e-8  -0.327 0.743\n# ℹ 3 more variables: p_folded_sim &lt;dbl&gt;, skewness &lt;dbl&gt;, kurtosis &lt;dbl&gt;\n\n\n\n\nShow the code\nggplot(data = gi_weekend_evening,\n       aes(x = TIME_PER_HOUR, y = gi_star))+\n  geom_line()+\n  theme_light()+\n  theme(legend.position = \"none\",\n        panel.grid.major = element_blank(), \n        panel.grid.minor = element_blank(),\n        axis.line = element_line(colour = \"grey\"))"
  },
  {
    "objectID": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#method-2-compute-distance-based-neighbours",
    "href": "Take_home_Ex/Take_home_Ex01/Take_home_Ex01b.html#method-2-compute-distance-based-neighbours",
    "title": "Dynamic Patterns of Public Transport Usage",
    "section": "Method 2: Compute distance based neighbours",
    "text": "Method 2: Compute distance based neighbours\n\nStep 1Step 2Step 3a (fixed distance)Step 3b (adaptive distance)\n\n\nDerive the centroid\npassengergrid is made up of polygons features, so we will derive points to make our connectivity graphs. The most typically method is polygon centroids.\n\n\nShow the code\nlongitude &lt;- map_dbl(hexagon_count$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(hexagon_count$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\nhead(coords)\n\n\n     longitude latitude\n[1,]  3970.122 28214.15\n[2,]  4220.122 28647.16\n[3,]  4470.122 30812.23\n[4,]  4720.122 28647.16\n[5,]  4720.122 30379.22\n[6,]  4720.122 31245.24\n\n\n\n\nDetermine the cut-off distance\nDetermine the upper limit for distance band by using the steps below: 1. Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep. 2. Convert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb(). 3. Return the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise. 4. Remove the list structure of the returned object by using unlist().\n\n\nShow the code\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n    319    5404    9647    8905   12016   16229 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 16229km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nCompute fixed distance weight matrix using dnearneigh() where the lower distance bound is 0 and the upper distance bound is the largest neighbour distance. longlat is TRUE if point coordinates are geographical longitude-latitude decimal degrees, in which case distances are measured in kilometers.\n\n\nShow the code\nwm_d16229 &lt;- dnearneigh(coords, 0, 16229, longlat = TRUE)\nwm_d16229\n\n\nNeighbour list object:\nNumber of regions: 1524 \nNumber of nonzero links: 2072742 \nPercentage nonzero weights: 89.24324 \nAverage number of links: 1360.067 \n\n\nThe output indicated there are 1,524 regions with an average of 4495 links.\nnb2listw() converts the nb object into spatial weights object.\n\n\nShow the code\nwm_d16229_lw &lt;- nb2listw(wm_d16229, style = 'B')\nsummary(wm_d16229_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1524 \nNumber of nonzero links: 2072742 \nPercentage nonzero weights: 89.24324 \nAverage number of links: 1360.067 \nLink number distribution:\n\n1223 1224 1225 1226 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 \n   4    2    9    2    6   10    4   13    7    2    2    2    5    3   12   14 \n1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 \n   9   19    9   12   11   18   16    6   23   25   16   27    7    3    9    8 \n1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 1273 1274 \n  14    9    4    6    2    4   11    9    2    2    2   14    7    5    8    3 \n1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1289 1290 1292 1295 \n  15   18    9    9    5    9    3    6    4    4    3    2    4    1    2    1 \n1302 1303 1305 1306 1307 1309 1311 1312 1313 1314 1315 1316 1317 1319 1320 1321 \n   3    2    3    8    2    1    4    8    1    3    1    3    1    3    1    5 \n1326 1327 1330 1331 1332 1334 1345 1348 1349 1350 1351 1354 1356 1358 1359 1360 \n   1    5    3    4    3    1    2    1    2    2    2    1    1    3    4    4 \n1363 1365 1367 1368 1370 1371 1372 1374 1375 1376 1377 1378 1379 1380 1381 1382 \n   6    4    1    9    2    6    3    6    6    4    7    2   12    4    5    9 \n1383 1384 1385 1386 1387 1388 1389 1391 1392 1393 1394 1396 1397 1398 1399 1400 \n   9    2    3    2    3    2    1    4    1    2    1    3    5    1    2    4 \n1401 1402 1403 1404 1405 1406 1407 1408 1409 1410 1411 1412 1413 1414 1415 1416 \n   2   11    8   10   13    8    2    9   11    9   19   16   15   12    6   23 \n1417 1418 1419 1420 1421 1422 1423 1424 1425 1426 1427 1428 1429 1430 1431 1432 \n  16   14   14   14   15   18   15   13   27   17   36    8   17    7   21   28 \n1433 1434 1435 1436 1437 1438 1439 1440 1441 1442 1443 1444 1445 1446 1447 1448 \n  12   23   36   36   30   31   23   13   20   20   21   23   11    5   17   10 \n1449 1450 1451 \n   5    2    1 \n4 least connected regions:\n617 732 834 909 with 1223 links\n1 most connected region:\n1063 with 1451 links\n\nWeights style: B \nWeights constants summary:\n     n      nn      S0      S1          S2\nB 1524 2322576 2072742 4145484 11314890568\n\n\nThe output indicated there is 1 least connected region with 4058 links and 4 most connected regions with 4818 links.\n\n\nComputing adaptive distance weight matrix\nknearneigh() obtains a matrix with the indices of points belonging to the set of the k nearest neighbours of each area. The number of neighbours can be imposed by k where the average number of neighbours is previously computed to be 21.47 neighboring regions.\n\n\nShow the code\nknn &lt;- knn2nb(knearneigh(coords, k=5))\nknn\n\n\nNeighbour list object:\nNumber of regions: 1524 \nNumber of nonzero links: 7620 \nPercentage nonzero weights: 0.328084 \nAverage number of links: 5 \nNon-symmetric neighbours list\n\n\n\n\nShow the code\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 1524 \nNumber of nonzero links: 7620 \nPercentage nonzero weights: 0.328084 \nAverage number of links: 5 \nNon-symmetric neighbours list\nLink number distribution:\n\n   5 \n1524 \n1524 least connected regions:\nwith 5 links\n1524 most connected regions:\nwith 5 links\n\nWeights style: B \nWeights constants summary:\n     n      nn   S0    S1     S2\nB 1524 2322576 7620 14180 154938\n\n\n\n\n\nGi statistics\nThe local Getis-Ord statistic is a ratio of the weighted average of the values in the neighboring locations to the sum of all values. It is called local g or local g*, when not including the value at the location.\nIn local g/g*, a value larger than the mean (or, a positive value for a standardized z-value) suggests a High-High cluster or hot spot, a value smaller than the mean (or, negative for a z-value) indicates a Low-Low cluster or cold spot.\nStep 1: localG() calculate the local Geary statistic for a given variable and a neighbor list object nb.\nStep 2: cbind() joins the Gi values calculated from fixed distance weight matrix to their corresponding passengergrid_time_total sf data frame.\nStep 3: Map the Gi values calculated from fixed distance weight matrix.\n\nAdaptive DistanceFixed Distance\n\n\nlocalG() compute the Gi values for passengergrid_time_total by using an adaptive distance weight matrix, knb_lw.\n\n\nShow the code\n#fips_adaptive &lt;- order(passengergrid_time_total$BUS_STOP_N)\n#gi.adaptive &lt;- localG(passengergrid_time_total$TOTAL_TRIPS, knn_lw)\n\n#passengergrid_time_total.gi &lt;- cbind(passengergrid_time_total, as.matrix(gi.adaptive)) %&gt;%\n#  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n#Gimap_adaptive &lt;-tm_shape(passengergrid_time_total.gi) +\n#  tm_fill(col = \"gstat_adaptive\", \n#          style = \"pretty\",\n#          palette=\"-RdBu\",\n#          title = \"local Gi using adaptive weight matrix\") +\n#  tm_borders(alpha = 0.5)\n#Gimap_adaptive\n\n\n\n\n\nShow the code\n#tmap_mode(\"view\")\n\n#Gimap_adaptive_map &lt;- tm_basemap(\"OneMapSG.Grey\") +\n#  tm_shape(passengergrid_time_total.gi) +\n#  tm_fill(\n#    col = \"gstat_adaptive\", \n#    palette=\"-RdBu\",\n#    style = \"pretty\",\n#    id = \"grid_id\",\n#    showNA = FALSE,\n#    alpha = 0.3,\n#    popup.format = list(\n#      grid_id = list(format = \"f\", digits = 0)\n#    )\n#  ) +\n#  tm_borders(col = \"grey40\", lwd = 0.7) +\n#  tm_layout(\n#   title = \"local Gi using adaptive weight matrix\",\n#    title.size = 1\n#  ) +\n#  tm_shape(malls_sf) +\n#  tm_dots(size = 0.01, col = \"cyan\", title = \"Malls\") \n\n#Gimap_adaptive_map\n\n\n\n\n\n\n\nShow the code\n#fips &lt;- order(hexagon_count$bus_stop_codes)\n#gi.fixed &lt;- localG(hexagon_count$, wm_d16229_lw)\n\n\nThe output returns a dataframe with the following columns: gi: the observed statistic e_gi: the permutation sample mean var_gi: the permutation sample variance p_value: the p-value using sample mean and standard deviation p_folded_sim: p-value based on the implementation of Pysal which always assumes a two-sided test taking the minimum possible p-value\n\n\nShow the code\n#passengergrid_time_total.gi &lt;- cbind(passengergrid_time_total, as.matrix(gi.fixed)) %&gt;%\n#  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\n\nShow the code\n#gi_total_trips &lt;- qtm(passengergrid_time_total, \"TOTAL_TRIPS\")\n#Gimap_fixed &lt;-tm_shape(passengergrid_time_total.gi) +\n#  tm_fill(col = \"gstat_fixed\", \n#          style = \"pretty\",\n#          palette=\"-RdBu\",\n#          title = \"local Gi\") +\n#  tm_borders(alpha = 0.5)\n#Gimap_fixed\n#tmap_arrange(gi_total_trips, Gimap, asp=1, ncol=2)\n\n\n\nThe Getis-Ord Gi* statistic map illustrates the local spatial autocorrelation of passenger volume during peak hours, indicating where high or low values cluster spatially. The colors indicate the z-scores from the Gi* statistic. Dark red areas represent locations with high z-scores, indicating a cluster of hot spots. These are areas with a significantly higher passenger volume. Dark blue areas have negative z-scores, pointing to clusters of cold spots.\nFrom the map, we can infer that there are distinct pockets where the passenger volume is significantly higher or lower than the average for the region. However, the distribution of hots spots and cold spots are dispersed and can be further improved by adaptive distance matrix.\n\n\nShow the code\n#par(mfrow=c(1,2))\n#plot(passengergrid_time_total$area_hexagon_grid, border=\"grey\", main=\"1st nearest neighbours\")\n#plot(k1, coords, add=TRUE, col=\"lightblue\", length=0.08)\n#lot(passengergrid_time_total$area_hexagon_grid, border=\"grey\", main=\"Distance link\")\n#plot(wm_d16229_lw, coords, add=TRUE, pch = 19, cex = 0.1)\n\n\n\n\nShow the code\n#gstar.fixed &lt;- localG_perm(passengergrid_time_total$TOTAL_TRIPS, wm_d16229_lw, nsim = 499)\n\n\n\n\n\nComparing the fixed and adpative distance weight matrix, the adaptive map may show a different pattern of clustering due to the adaptive nature of the weight matrix. The hot spots and cold spots in the adaptive distance matrix map is localized, leading to a finer resolution of clustering patterns and can be particularly useful when the distribution of data points is uneven across the space.\nThe hotspots are Boon Lay, Clementi, Woodlands, Ang Mo Kio, Bedok and Tampines."
  }
]