---
title: "Spatial Interactions"
author: "Wan Kee"
date: "30 November 2023"
date modified: "2 December 2023"
format: html
execute: 
  echo: true
  eval: true
  warning: false
editor: source
---

# 1.1 Overview

**Spatial interaction** represent the dynamic flow or movementmof people, material, or information between locations in geographical space. Each spatial interaction is composed of **a discrete origin and destination (OD) pair** and represented as a spatial interaction matrix of **centroids** from origin and destination. The connection between origin and their destination can be visualized by **desire lines**, typically straight lines that records the the number of people travelling between locations.

Learning Objectives 
1. Build a spatial interaction matrix 
2. Construct desire lines in geospatial data

# 1.2 Load packages

`sf` performs geospatial data import, integration, processing and transformation.
`DT` enables R data objects (matrices or data frames) to be displayed as tables on HTML pages.
`tidyverse` performs data import, integration, wrangling and visualisation. 
`tmap` creates thematic maps. 
`stplanr`analyses OD matrix.

```{r}
pacman::p_load(tmap, sf, sp, DT, stplanr, performance, reshape2, ggpubr, units, tidyverse)
```

# 1.3 Import data

::: panel-tabset
## Passenger Volume
`odbus` contains the number of trips by weekdays and weekends from origin to destination bus stops. This is a **September 2023** dataset in *Passenger Volume by Origin Bus Stop* from LTA Datamall and reflects the passenger trip traffic. 

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus <- read_csv("data/aspatial/origin_destination_bus_202309.csv")
glimpse(odbus)
```
The output shows that `odbus` is an **aspatial** data containing 5,714,196 records and 7 fields. Origin and destination codes will be converted to from character to factor.

```{r}
odbus <- odbus %>% 
  mutate(ORIGIN_PT_CODE = as.factor(ORIGIN_PT_CODE),
         DESTINATION_PT_CODE = as.factor(DESTINATION_PT_CODE))
```

## Bus Stop
`busstops` is a **geospatial** dataset that contains the detailed information for all bus stops currently serviced by buses, including bus stop code, road name, description, location coordinates. The output indicates that the geospatial objects are **point** features. There are **5161 features** and 3 fields. It is in **SVY21** projected coordinates system with **XY** dimension.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
busstop <- st_read(dsn = "data/geospatial/BusStopLocation_Jul2023", layer = "BusStop") %>%
  st_transform(crs = 3414)
glimpse(busstop)
```

## Subzone
`mpsz` is a **geospatial** dataset from the Master Plan 2019, a forward looking guiding plan for Singapore's development in the medium term over the next 10 to 15 years published in **2019**. Note this `mpsz` differs from that in previous chapter, [Data Wrangling](https://cosmic-kitten.netlify.app/hands_on_ex/hands_on_ex01/hands_on_ex01).

The output indicates that the geospatial objects are **multipolygon** features. There are **332 features** and 6 fields. It is in **WGS84** projected coordinates system with **XY** dimension.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
mpsz = st_read(dsn="data/geospatial/MPSZ-2019", layer="MPSZ-2019") %>% 
  st_transform(crs=3414)
glimpse(mpsz)
```
:::

# 1.4 Prepare data

We will focus on weekday afternoon peak hours to capture high movements and interactions.

::: panel-tabset

## Step 1

Commuting flows on **weekday** between **5pm to 8pm** are extracted and there are **226,658 records** during weekday afternoon peak hours based on bus stop code. The data table can be viewed using `datatable()` and saved to rds using `write_rds()`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
odbus5_8 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 5 & TIME_PER_HOUR <= 8) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))

datatable(odbus5_8)
```


```{r}
# save and read
write_rds(odbus5_8, "rds/odbus5_8.rds")
odbus5_8 <- read_rds("rds/odbus5_8.rds")
```

## Step 2

To integrate the planning subzone codes `SUBZONE_C` of `mpsz` sf data frame into `busstop` sf data frame, `st_intersection()` is used to perform point and polygon overly and the output will be in point sf object.`select()` of dplyr package is then use to retain only `BUS_STOP_N` and `SUBZONE_C` in the `busstop_mpsz` sf data frame. There are **5,156** bus stops in the subzones.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()

datatable(busstop_mpsz)
```

## Step 3

Append the planning subzone code from `busstop_mpsz` data frame onto `odbus5_8` data frame.

```{r}
od_data <- left_join(odbus5_8, busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
glimpse(od_data)
```
There are **224,042** commuting flows with origin and destinations.

## Step 4

Check for duplicate records.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()

duplicate
```
The output shows 1,084 duplicated rows with same values across 4 fields. Duplicates are removed by `unique()`. 

```{r}
od_data <- unique(od_data)
glimpse(od_data)
```
From previous 224,042 records, 542 duplicates are removed and 223,500 unique records remain in `od_data`.

## Step 5

Append planning subzone codes to `od_data`.
```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 

od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS)) %>%
  ungroup()

glimpse(od_data)
```
Summing the trips by origin and destination, there are **20,597** OD flows.

```{r}
#save and read
write_rds(od_data, "rds/od_data.rds")
od_data <- read_rds("rds/od_data.rds")
```

# 1.5 Plot data

To ensure that spatial flows are between different subzones, the intra-zonal flows within the same subzones will be removed.
prepare a desire line by using stplanr package

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

Create desire lines

`od2line()` takes a data frame and a spatial object as inputs and outputs geographic lines representing movement between origins and destinations.

```{r}
flowline <- od2line(flow = od_data1, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

```{r}
tmap_options(check.and.fix = TRUE)

tm_shape(mpsz) + tm_polygons() + flowline %>% 
  tm_shape() + tm_lines(lwd = "MORNING_PEAK",
                        style = "quantile",
                        scale = c(0.1, 1, 3, 5, 7, 10),
                        n = 6,
                        alpha = 0.9)
```

To visualize OD flows above 10000,

```{r}
tm_shape(mpsz) + tm_polygons() + flowline %>%  
  filter(MORNING_PEAK >= 10000) %>%
  tm_shape() + tm_lines(lwd = "MORNING_PEAK",
                        style = "quantile",
                        scale = c(0.1, 1, 3, 5, 7, 10),
                        n = 6,
                        alpha = 0.9)
```
